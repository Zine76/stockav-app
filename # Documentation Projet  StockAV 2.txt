###############################################################################
#                                                                             #
#                        Wiki Projet : StockAV                                #
#                                                                             #
###############################################################################

**Version :** [Date de création/mise à jour de ce wiki]
**Auteur(s) :** [Ton nom/équipe], Assistant IA

---

**Table des Matières (Simplifiée)**

1.  [Introduction](#1-introduction)
2.  [Fonctionnalités](#2-fonctionnalités)
3.  [Stack Technologique](#3-stack-technologique)
4.  [Structure du Projet](#4-structure-du-projet)
5.  [Schéma de la Base de Données (Supabase)](#5-schéma-de-la-base-de-données-supabase)
6.  [Logique Principale & Modules](#6-logique-principale--modules)
7.  [Configuration & Installation Locale](#7-configuration--installation-locale)
8.  [Déploiement](#8-déploiement)
9.  [Utilisation](#9-utilisation)
10. [Considérations de Sécurité](#10-considérations-de-sécurité)
11. [Code Source Complet](#11-code-source-complet)
12. [Améliorations Prévues/Possibles](#12-améliorations-possibles)

---

## 1. Introduction

**StockAV** est une application web monopage (Single Page Application - SPA) conçue pour la gestion intelligente du stock de composants électroniques. Elle permet aux techniciens de rechercher des composants, de vérifier leur disponibilité locale, de trouver des équivalents via une IA, de gérer les entrées/sorties de stock, et d'administrer les données de base.

L'application vise à simplifier et accélérer le processus de recherche et de prélèvement de composants dans un atelier ou un laboratoire. Elle utilise Supabase comme backend (BaaS) et intègre une IA via OpenRouter pour la recherche d'équivalents.

---

## 2. Fonctionnalités

*   **Authentification Utilisateur :** Connexion sécurisée par code technicien et mot de passe via Supabase Auth.
*   **Navigation par Onglets :** Interface claire divisée en sections : Recherche, Stock, Log (Historique), Administration, Paramètres.
*   **Recherche Intelligente (Chat IA) :**
    *   Interface conversationnelle (zone de saisie en bas).
    *   Extraction de la référence du composant depuis une requête.
    *   Vérification du stock local (Supabase DB).
    *   **Recherche d'Équivalents via IA :** Utilise OpenRouter (modèle Llama 3.1 70B Instruct ou Mistral 7B Instruct) via une fonction Edge Supabase sécurisée pour suggérer jusqu'à 5 équivalents.
    *   Vérification du stock local pour chaque équivalent.
    *   Affichage structuré des résultats (statut original + équivalents avec statut local).
    *   Liens de recherche externes (Mouser, Digi-Key, AliExpress) clairs.
    *   Flux de prise de stock intégré au chat pour les composants disponibles (si connecté).
*   **Visualisation du Stock :**
    *   Tableau paginé de l'inventaire.
    *   Indicateurs visuels de niveau de stock (OK, Avertissement, Critique).
    *   Filtrage (catégorie, recherche texte).
    *   Affichage du tiroir (si connecté) et lien datasheet.
    *   Interaction rapide pour modifier la quantité via modale (si connecté).
*   **Historique des Mouvements (Log) :**
    *   Tableau paginé des entrées/sorties.
    *   Indique date/heure, technicien, action (+/-), référence, quantité modifiée, stock final.
    *   **(Fonctionnalité prévue)** Purge possible par admin spécifique.
*   **Administration :** (Accessible si connecté)
    *   **Gestion des Catégories :** Ajout, modification, suppression. Définition d'attributs spécifiques.
    *   **Gestion du Stock :** Vérification, mise à jour rapide quantité (+/-), ajout/modification complète (`upsert`) avec validation (catégorie obligatoire).
*   **Paramètres & Données :** **(Accessible UNIQUEMENT par l'utilisateur 'zine')**
    *   **Export :** Inventaire (CSV), Historique (TXT).
    *   **Import :** Inventaire (CSV) avec validation.
    *   **(Fonctionnalité prévue)** Options d'import (Écraser/Ajouter).
*   **Afficheur 7 Segments :** Affiche le numéro de tiroir du dernier composant sélectionné/vérifié (persiste si connecté).

---

## 3. Stack Technologique

*   **Frontend :** HTML5, CSS3, JavaScript (ES6+, async/await)
*   **Backend & Base de Données (BaaS) :**
    *   **Supabase v2 :** PostgreSQL DB, Auth, Edge Functions (Deno/TypeScript)
    *   **Supabase Client Library :** `supabase-js` v2
*   **API IA :**
    *   **OpenRouter.ai :** Proxy pour LLM.
    *   **Modèle IA :** `meta-llama/llama-3.1-70b-instruct:free` (ou `mistralai/mistral-7b-instruct:free`) via OpenRouter.
*   **Librairies JS Externes :**
    *   **PapaParse v5.4.1 :** Parsing/Génération CSV.
*   **Police :** Inter (via Google Fonts)

---

## 4. Structure du Projet

```
/stockav-app/           <-- Dossier racine (probablement)
|
├── index.html          <-- Fichier principal HTML
├── style.css           <-- Fichier des styles CSS
├── script.js           <-- Fichier principal JavaScript (logique frontend)
|
└── supabase/           <-- Dossier Supabase CLI (si utilisé localement)
    |
    └── functions/      <-- Dossier Fonctions Edge
        |
        ├── openai-equivalents/ <-- Fonction pour l'IA (Nom historique)
        │   └── index.ts      <-- Code source Fonction Edge (Deno/TypeScript)
        |
        └── _shared/          <-- Code partagé (CORS)
            └── cors.ts       <-- Gestion CORS
```

---

## 5. Schéma de la Base de Données (Supabase)

*   **`categories`**
    *   `id` (uuid, PK)
    *   `name` (text, unique, not null)
    *   `attributes` (text, nullable) - Noms attributs séparés par virgule.
    *   `created_at` (timestamptz)

*   **`inventory`**
    *   `id` (uuid, PK)
    *   `ref` (text, unique, not null) - **Indexé**.
    *   `description` (text)
    *   `manufacturer` (text)
    *   `quantity` (integer, >= 0, not null)
    *   `datasheet` (text, URL)
    *   `drawer` (text) - **Indexé**.
    *   `category_id` (uuid, FK -> `categories.id`)
    *   `attributes` (jsonb) - Valeurs attributs spécifiques.
    *   `critical_threshold` (integer, >= 0)
    *   `created_at` (timestamptz)
    *   `updated_at` (timestamptz) - *Trigger recommandé.*

*   **`logs`**
    *   `id` (uuid, PK)
    *   `created_at` (timestamptz) - **Indexé**.
    *   `user_id` (uuid, FK -> `auth.users.id`)
    *   `user_code` (text) - Code technicien (pour affichage facile).
    *   `component_ref` (text, not null) - **Indexé**.
    *   `quantity_change` (integer, != 0, not null)
    *   `quantity_after` (integer, >= 0, not null)

*(Note : RLS non activé par défaut, **CRUCIAL** pour la production).*

---

## 6. Logique Principale & Modules

Détail des fonctionnalités implémentées dans `script.js`.

### 6.1 Authentification (`handleLogin`, `handleLogout`, `setupAuthListener`, `handleUserConnected`, `handleUserDisconnected`)

*   Utilise `signInWithPassword` et `signOut`.
*   Email factice (`code@stockav.local`).
*   `onAuthStateChange` met à jour UI (`currentUser`, `currentUserCode`, affichage/masquage éléments, activation boutons).
*   **Accès Spécifique :** La fonction `handleUserConnected` vérifie si `currentUserCode === 'zine'` pour afficher/activer le bouton "Paramètres". Les autres utilisateurs ne le voient pas. `setActiveView` empêche également l'accès direct à la vue Paramètres si l'utilisateur n'est pas 'zine'.
*   Classe `user-logged-in` sur `<body>` pour CSS conditionnel (ex: afficher colonne tiroir).

### 6.2 Navigation & Vues (`setActiveView`)

*   Gère l'affichage des sections `<main id="...">`.
*   Active le bouton de navigation correspondant.
*   Vérifie `currentUser` (et `currentUserCode` pour Paramètres) avant d'afficher les vues protégées.
*   Charge les données de la vue lors de son activation (ex: `displayInventory`).

### 6.3 Vue Recherche (Chat IA) (`handleUserInput`, `checkComponentWithAI`, `getAIEquivalents`, `addMessageToChat`, etc.)

*   **Layout :** Zone d'affichage (`#response-output`) en haut, zone de saisie (`#search-section`) en bas.
*   **Fonctionnement (`handleUserInput`):**
    1.  Priorité : Gère la réponse si `conversationState.awaitingQuantityConfirmation`.
    2.  Sinon : Tente `extractReference`.
    3.  Si réf trouvée : Appelle `checkComponentWithAI`. Réinitialise `conversationState`.
    4.  Si pas de réf : Affiche message d'erreur/aide, en tenant compte de `awaitingEquivalentChoice`.
*   **`checkComponentWithAI` :**
    1.  Vérifie stock local original (`getStockInfoFromSupabase`).
    2.  Appelle fonction Edge via `getAIEquivalents`.
    3.  Vérifie stock local des équivalents reçus.
    4.  Construit HTML de réponse (statut original, liste équivalents + statut + raison + liens, bouton "Prendre" si pertinent et connecté).
    5.  Met à jour `conversationState.awaitingEquivalentChoice`.
*   **Prise de Stock via Chat :** Détecte clic sur `.take-button`, vérifie connexion, demande quantité, valide, appelle `updateStockInSupabase`, affiche confirmation/erreur, reset `conversationState`.
*   **Liens Externes (`provideExternalLinksHTML`) :** Génère liens Mouser, DK, AliExpress. Texte "AliExpress" complet affiché.
*   **`extractReference` :** Utilise une série de RegEx pour identifier les références potentielles.

### 6.4 Vue Stock (`displayInventory`, `handleInventoryRowClick`, modale)

*   Affiche tableau paginé (`ITEMS_PER_PAGE`), filtré via `inventory-category-filter` et `inventory-search-filter`.
*   Utilise `getStockStatus` pour indicateur couleur.
*   Clic sur ligne (`handleInventoryRowClick`, si connecté) récupère infos, màj 7-seg (si tiroir) et ouvre modale.
*   Modale (`quantity-change-modal`) permet ajustement +/- et confirme via `updateStockInSupabase`.

### 6.5 Vue Historique (Log) (`displayLog`)

*   Affiche tableau paginé des logs, trié par date décroissante.
*   Formate timestamp, met en couleur +/-.
*   **(Prévu)** Affichera bouton suppression/purge si utilisateur 'zine'.

### 6.6 Vue Administration (`loadAdminData`, `loadCategoriesAdmin`, `addCategoryEventListeners`, `addStockEventListeners`, `showAdminFeedback`, etc.)

*   Charge catégories (via `getCategories` avec cache `categoriesCache`).
*   **Gestion Catégories :** Liste, formulaire ajout/modif, bouton suppression (avec gestion erreur `23503` FK et `23505` unique). Invalide cache après modif.
*   **Gestion Stock :**
    *   `check-stock-button` : Récupère infos via `getStockInfoFromSupabase`, pré-remplit formulaire pour modif ou prépare pour ajout. Màj 7-seg si trouvé.
    *   `update-quantity-button` : Màj rapide via `updateStockInSupabase`.
    *   `save-component-button` : Récupère toutes les données, **valide que la catégorie est sélectionnée**, valide autres champs, appelle `supabase.from('inventory').upsert()`. Màj 7-seg si tiroir.
    *   `addComponentCategorySelectListener` : Affiche/cache dynamiquement les champs attributs spécifiques selon la catégorie choisie.

### 6.7 Vue Paramètres (Import/Export) (`loadSettingsData`, `handleExport...`, `handleImport...`, `showSettingsFeedback`)

*   **Accès :** Chargée (`loadSettingsData`) et accessible **uniquement si `currentUserCode === 'zine'**.
*   **Export :** Récupère toutes les données (inventory/logs), formate (CSV via PapaParse, TXT formaté), déclenche téléchargement (`downloadFile`).
*   **Import :** Lit CSV (`Papa.parse`), valide en-têtes, valide chaque ligne (ref, qté, URL, seuil, catégorie via `categoryMap`, JSON attributs), collecte erreurs, si OK appelle `supabase.from('inventory').upsert()`.
*   **(Prévu)** Ajout options "Écraser"/"Ajouter".

### 6.8 Interaction Supabase (Frontend) (`getStockInfoFromSupabase`, `updateStockInSupabase`, `addLogEntry`, `getCategories`, etc.)

*   Fonctions dédiées pour lire/écrire dans les tables Supabase.
*   `updateStockInSupabase` est critique : lit, vérifie stock négatif, update, puis log. Gère erreurs.
*   Utilisation de `select`, `insert`, `update`, `upsert`, `delete`, `ilike`, `eq`, `or`, `order`, `range`, `single`, `count`, `functions.invoke`.

### 6.9 Fonction Edge Supabase (`openai-equivalents/index.ts`)

*   **Nom historique**, pourrait être renommé (`ai-component-info`).
*   Proxy sécurisé vers OpenRouter (cache clé API).
*   Gère CORS (`_shared/cors.ts`).
*   Récupère `OPENROUTER_API_KEY` et `APP_URL_REFERER` des secrets.
*   Reçoit `reference` via POST.
*   Construit prompt pour demander **équivalents** au format JSON.
*   Appelle API OpenRouter (`fetch`) avec modèle (`meta-llama/llama-3.1-70b-instruct:free` ou autre).
*   Parse la réponse, extrait JSON, filtre/formate/limite à `MAX_EQUIVALENTS`.
*   Retourne `{"equivalents": [...]}` ou `{"error": "..."}`.

### 6.10 Afficheur 7 Segments (`updateSevenSegmentDisplay`, `segmentMap`)

*   Mis à jour par `handleInventoryRowClick`, clic "Prendre" chat, check/save admin.
*   Mémorise dernier tiroir dans `lastDisplayedDrawer`.
*   Ne s'affiche que si `currentUser` existe et `lastDisplayedDrawer` a une valeur.
*   Utilise `segmentMap` pour allumer les segments correspondants.

---

## 7. Configuration & Installation Locale

1.  **Prérequis :** Navigateur, Git, Supabase CLI, Docker Desktop, (Optionnel: Python/Node pour serveur local).
2.  **Projet Supabase :** Créer projet, exécuter SQL pour tables (voir Schéma), **DÉSACTIVER RLS** pour dev initial.
3.  **Clé API OpenRouter :** Créer compte, générer clé.
4.  **Récupérer Code :** Cloner dépôt ou copier fichiers.
5.  **Configurer Secrets Supabase (CLI) :** `supabase login`, `supabase link ...`, `supabase secrets set OPENROUTER_API_KEY=...`, `supabase secrets set APP_URL_REFERER=...`.
6.  **Déployer Fonction Edge :** Docker lancé, `supabase functions deploy openai-equivalents --no-verify-jwt`.
7.  **Lancer Serveur Local :** `cd chemin/vers/app`, `python -m http.server 8000` (ou autre).
8.  **Accéder :** `http://localhost:8000`.

---

## 8. Déploiement

### 8.1 Déploiement Fonction Edge Supabase

*   Réalisé via Supabase CLI (voir section 7, étapes 5 & 6).
*   Fonction `openai-equivalents` active sur projet Supabase `tjdergojgghzmopuuley`.

### 8.2 Déploiement Frontend (GitHub Pages)

*   Dépôt : `https://github.com/Zine76/stockav-app.git`
*   Branche : `main`, Dossier : `/ (root)`
*   Push via `git push origin main` (avec PAT).
*   URL Publique : **`https://zine76.github.io/stockav-app/`**

---

## 9. Utilisation

1.  Accéder à l'URL publique.
2.  Se connecter (code technicien / mot de passe).
3.  **Recherche :** Onglet "Recherche Composant", taper réf/question, voir réponse, cliquer "Prendre" si dispo/connecté, entrer quantité.
4.  **Stock :** Onglet "Stock Actuel", filtrer, paginer, cliquer ligne pour modale +/- (si connecté).
5.  **Historique :** Onglet "Historique (LOG)" (si connecté).
6.  **Admin :** Onglet "Administration" (si connecté) pour gérer catégories/stock.
7.  **Paramètres :** Onglet "Paramètres" (si connecté **et** utilisateur 'zine') pour import/export.
8.  Déconnexion via bouton.

---

## 10. Considérations de Sécurité

*   **Clé API OpenRouter :** Sécurisée dans secrets Supabase, utilisée seulement par Fonction Edge. **NON EXPOSÉE** au frontend.
*   **Auth Git :** Utilisation de PAT recommandée pour `git push`.
*   **Auth Application :** Accès fonctionnalités via Supabase Auth.
*   **CORS (`_shared/cors.ts`) :** Actuellement `*` (permissif). **RECOMMANDÉ :** Restreindre à l'URL exacte (`https://zine76.github.io`) en production.
*   **Row Level Security (RLS) :** Actuellement **DÉSACTIVÉE**. **VULNÉRABILITÉ MAJEURE.** **CRUCIAL : Activer et configurer des politiques RLS** pour `inventory`, `logs`, `categories` en production (ex: lecture pour tous, écriture pour `authenticated`).
*   **Validation Côté Serveur :** Validation frontend existe, mais des contraintes `CHECK` ou triggers/fonctions DB renforceraient l'intégrité.

---

## 11. Code Source Complet

*(Note: Inclut les dernières corrections pour admin save, lien Ali, layout chat)*

### 11.1 `index.html`

```html
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>StockAV</title>
    <link rel="stylesheet" href="style.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <!-- Librairie Supabase JS v2 -->
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <!-- Librairie PapaParse pour CSV -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.4.1/papaparse.min.js" integrity="sha512-dfX5uYVXzyU8+KHqj8bjo7UkOdg18PaOtpa48djpNbZHwExddghZ+ZmzWT06R5v6NSk3ZUfsH6FNEDepLx9hPQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
</head>
<body> <!-- La classe user-logged-in sera ajoutée/retirée ici par JS -->
    <!-- Afficheur 7 Segments -->
    <div id="seven-segment-display" class="display-off">
        <div class="digit digit-1">
            <div class="segment segment-a"></div><div class="segment segment-b"></div><div class="segment segment-c"></div>
            <div class="segment segment-d"></div><div class="segment segment-e"></div><div class="segment segment-f"></div>
            <div class="segment segment-g"></div>
        </div>
        <div class="digit digit-2">
             <div class="segment segment-a"></div><div class="segment segment-b"></div><div class="segment segment-c"></div>
             <div class="segment segment-d"></div><div class="segment segment-e"></div><div class="segment segment-f"></div>
             <div class="segment segment-g"></div>
        </div>
        <div class="digit digit-3">
             <div class="segment segment-a"></div><div class="segment segment-b"></div><div class="segment segment-c"></div>
             <div class="segment segment-d"></div><div class="segment segment-e"></div><div class="segment segment-f"></div>
             <div class="segment segment-g"></div>
        </div>
        <div class="digit digit-4">
             <div class="segment segment-a"></div><div class="segment segment-b"></div><div class="segment segment-c"></div>
             <div class="segment segment-d"></div><div class="segment segment-e"></div><div class="segment segment-f"></div>
             <div class="segment segment-g"></div>
        </div>
    </div>

    <div class="container">
        <header class="app-header">
            <h1>StockAV</h1>
            <p class="app-subtitle">Gestion de stock des pièces éléctroniques</p>
            <!-- Zone de Connexion / Infos Utilisateur -->
            <div id="auth-section">
                <div id="login-area" class="login-section">
                    <label for="login-code">Code Technicien:</label>
                    <input type="text" id="login-code" placeholder="Votre code unique">
                    <label for="login-password">Mot de passe:</label>
                    <input type="password" id="login-password" placeholder="Votre mot de passe">
                    <button id="login-button">Connexion</button>
                    <p id="login-error" class="error-message" style="display: none;"></p>
                </div>
                <div id="user-info-area" class="user-info" style="display: none;">
                    Connecté: <strong id="user-display"></strong>
                    <button id="logout-button" title="Se déconnecter">Déconnexion</button>
                </div>
            </div>
        </header>

        <!-- Navigation Principale -->
        <nav id="main-navigation" class="view-navigation">
            <button id="show-search-view" class="nav-button active">Recherche Composant</button>
            <button id="show-inventory-view" class="nav-button">Stock Actuel</button>
            <button id="show-log-view" class="nav-button protected" style="display: none;" disabled title="Connexion requise">Historique (LOG)</button>
            <button id="show-admin-view" class="nav-button protected" style="display: none;" disabled title="Connexion requise">Administration</button>
            <button id="show-settings-view" class="nav-button protected" style="display: none;" disabled title="Connexion requise">Paramètres</button>
        </nav>

        <!-- ================== VUE RECHERCHE UTILISATEUR (CHAT) ================== -->
        <main id="search-view" class="view-section active-view">
             <h2 class="view-title">Recherche de Composants</h2>

             <!-- 1. Zone d'affichage des messages -->
             <div class="response-section">
                 <h3 class="section-subtitle">Conversation avec StockAV</h3>
                 <div id="response-output" class="output-box chat-box">
                     <!-- Messages ajoutés dynamiquement par JS -->
                 </div>
                 <div id="loading-indicator" class="loading typing-indicator" style="display: none;">
                     <i>StockAV réfléchit...</i>
                 </div>
             </div>

             <!-- 2. Zone de saisie -->
             <div class="search-section">
                 <div class="search-box">
                     <input type="text" id="component-input" placeholder="Demandez à StockAV (ex: 'LM358N dispo ?')">
                     <button id="search-button" title="Envoyer la requête">Envoyer</button>
                 </div>
             </div>

        </main>

        <!-- ===================== VUE INVENTAIRE ===================== -->
        <main id="inventory-view" class="view-section" style="display: none;">
            <h2 class="view-title">Stock Actuel</h2>
            <div class="inventory-filters filter-box">
                <div class="form-group">
                    <label for="inventory-category-filter">Catégorie:</label>
                    <select id="inventory-category-filter">
                        <option value="all">Toutes</option>
                        <!-- JS -->
                    </select>
                </div>
                <div class="form-group filter-search-group">
                    <label for="inventory-search-filter">Recherche:</label>
                    <input type="text" id="inventory-search-filter" placeholder="Réf, Desc, Fab...">
                </div>
                 <button id="apply-inventory-filter-button" title="Appliquer les filtres">Filtrer</button>
            </div>

            <div class="inventory-display data-display-box">
                <table id="inventory-table" class="data-table">
                    <thead>
                        <tr>
                            <th>Référence</th>
                            <th>Description</th>
                            <th>Catégorie</th>
                            <th>Tiroir</th>
                            <th>Fabricant</th>
                            <th>Quantité</th>
                            <th>Datasheet</th>
                        </tr>
                    </thead>
                    <tbody id="inventory-table-body">
                        <!-- Lignes générées par JS -->
                    </tbody>
                </table>
                 <p id="inventory-no-results" class="no-results-message" style="display: none;">Aucun résultat.</p>
            </div>

            <div id="inventory-pagination" class="pagination-controls">
                <button id="inventory-prev-page" disabled>« Préc.</button>
                <span id="inventory-page-info">Page 1 / 1</span>
                <button id="inventory-next-page" disabled>Suiv. »</button>
            </div>
        </main>

         <!-- ===================== VUE HISTORIQUE (LOG) ===================== -->
         <main id="log-view" class="view-section" style="display: none;">
            <h2 class="view-title">Historique des Mouvements</h2>
            <!-- Feedback area pour purge (optionnel) -->
            <div id="log-feedback" class="feedback-area" style="display:none;"></div>
            <div class="log-display data-display-box">
                 <table id="log-table" class="data-table">
                     <thead>
                         <tr>
                             <th>Date & Heure</th>
                             <th>Technicien</th>
                             <th>Action</th>
                             <th>Référence</th>
                             <th>+/-</th>
                             <th>Stock Final</th>
                             <!-- Colonne Actions ajoutée par JS si zine -->
                         </tr>
                     </thead>
                     <tbody id="log-table-body"></tbody>
                 </table>
                 <p id="log-no-results" class="no-results-message" style="display: none;">Historique vide.</p>
                 <!-- Bouton Purge Tout ajouté par JS après le tableau si zine -->
            </div>
            <div id="log-pagination" class="pagination-controls">
                <button id="log-prev-page" disabled>« Préc.</button>
                <span id="log-page-info">Page 1 / 1</span>
                <button id="log-next-page" disabled>Suiv. »</button>
            </div>
         </main>

        <!-- ===================== VUE ADMINISTRATION ===================== -->
        <main id="admin-view" class="view-section" style="display: none;">
             <h2 class="view-title">Administration</h2>
             <!-- Section Gestion des Catégories -->
            <section id="category-manager" class="admin-section">
                <h3>Gestion des Catégories</h3>
                 <div class="admin-columns">
                    <div class="category-list-section">
                        <h4>Catégories Existantes</h4>
                        <ul id="category-list"></ul>
                    </div>
                    <div class="category-form-section">
                        <h4 id="category-form-title">Ajouter une Catégorie</h4>
                        <form id="category-form">
                            <input type="hidden" id="category-id-edit" value="">
                            <div class="form-group"><label for="category-name">Nom:</label><input type="text" id="category-name" required></div>
                            <div class="form-group"><label for="category-attributes">Attributs (séparés par virgule):</label><textarea id="category-attributes" rows="3" placeholder="Ex: Type, Capacité, Tension"></textarea><small>Définit les champs spécifiques.</small></div>
                            <div class="form-actions"><button type="submit" id="save-category-button">Enregistrer</button><button type="button" id="cancel-edit-button" style="display: none;">Annuler</button></div>
                        </form>
                    </div>
                </div>
            </section>
            <!-- Section Gestion du Stock -->
            <section id="stock-manager" class="admin-section">
                <h3>Gestion du Stock</h3>
                <form id="stock-form" onsubmit="return false;">
                    <div class="form-group"><label for="component-ref-admin">Référence Composant:</label><input type="text" id="component-ref-admin" required placeholder="Ex: LM358N"><button type="button" id="check-stock-button">Vérifier Stock</button></div>
                    <div id="component-info" style="display: none;">
                        <div class="form-group inline-group">
                            <label>Stock Actuel:</label><span id="current-quantity">N/A</span>
                            <label for="quantity-change" style="margin-left: 20px;">Modifier (+/-):</label><input type="number" id="quantity-change" value="0">
                            <button type="button" id="update-quantity-button">Mettre à jour</button>
                        </div>
                        <hr>
                        <p><em>Ou modifiez les détails complets ci-dessous :</em></p>
                    </div>
                    <div id="component-details">
                        <div class="form-group"><label for="component-category-select">Catégorie:</label><select id="component-category-select" required><option value="">-- Sélectionner --</option></select></div>
                        <div class="form-group"><label for="component-desc">Description:</label><input type="text" id="component-desc" placeholder="Ex: Ampli Op Double"></div>
                        <div class="form-group"><label for="component-mfg">Fabricant:</label><input type="text" id="component-mfg" placeholder="Ex: TI"></div>
                        <div class="form-group"><label for="component-drawer-admin">Tiroir (optionnel):</label><input type="text" id="component-drawer-admin" placeholder="Ex: 01A5"></div>
                        <div class="form-group"><label for="component-datasheet">Lien Datasheet (optionnel):</label><input type="url" id="component-datasheet" placeholder="https://..."></div>
                        <div id="category-specific-attributes" class="form-group" style="display: none;"></div>
                        <div class="form-group"><label for="component-initial-quantity">Quantité Totale:</label><input type="number" id="component-initial-quantity" value="0" min="0"></div>
                        <div class="form-group">
                            <label for="component-threshold">Seuil Critique (optionnel):</label>
                            <input type="number" id="component-threshold" min="0" placeholder="Ex: 10">
                            <small>Seuil pour indicateur orange/rouge.</small>
                        </div>
                        <div class="form-actions"><button type="submit" id="save-component-button">Enregistrer Composant</button></div>
                    </div>
                </form>
            </section>
             <div id="admin-feedback" class="feedback-area"></div>
        </main> <!-- Fin de #admin-view -->

        <!-- ===================== VUE PARAMÈTRES ===================== -->
        <main id="settings-view" class="view-section" style="display: none;">
            <h2 class="view-title">Paramètres & Gestion Données</h2>

            <!-- Section Export -->
            <section id="export-section" class="admin-section">
                <h3>Exporter les Données</h3>
                <div class="export-options">
                    <div class="form-group">
                        <label>Exporter le Stock Actuel :</label>
                        <button id="export-inventory-csv-button" class="action-button">Exporter en CSV</button>
                        <small>Télécharge un fichier CSV de tout l'inventaire.</small>
                    </div>
                    <hr>
                    <div class="form-group">
                        <label>Exporter l'Historique des Mouvements :</label>
                        <button id="export-log-txt-button" class="action-button">Exporter en TXT</button>
                        <small>Télécharge un fichier TXT de tous les logs.</small>
                    </div>
                </div>
                <div id="export-feedback" class="feedback-area" style="margin-top: 15px;"></div>
            </section>

            <!-- Section Import -->
            <section id="import-section" class="admin-section">
                <h3>Importer du Stock (via CSV)</h3>
                <div class="import-options">
                    <div class="form-group">
                        <label for="import-csv-file">Sélectionner un fichier CSV :</label>
                        <input type="file" id="import-csv-file" accept=".csv">
                        <small>Colonnes requises: <strong>ref</strong>, <strong>quantity</strong>. Optionnelles: description, manufacturer, datasheet, drawer, category_name, critical_threshold, attributes (JSON). Voir doc.</small>
                    </div>
                    <!-- Options d'import à ajouter ici (prévu) -->
                    <button id="import-inventory-csv-button" class="action-button success">Lancer l'Importation</button>
                </div>
                <div id="import-feedback" class="feedback-area" style="margin-top: 15px;"></div>
            </section>

        </main> <!-- Fin de #settings-view -->


        <footer class="app-footer">
            <p>© 2025 StockAV - UQÀM</p>
        </footer>
    </div>

    <!-- Fenêtre Modale pour Modifier Quantité (+/-) -->
    <div id="modal-overlay"></div>
    <div id="quantity-change-modal">
        <h3>Modifier le Stock</h3>
        <p>Composant: <strong id="modal-component-ref">N/A</strong></p>
        <p>Quantité actuelle: <strong id="modal-current-quantity">N/A</strong></p>
        <div class="quantity-adjuster">
            <button id="modal-decrease-button" class="adjust-button" title="Diminuer la quantité">-</button>
            <span id="modal-change-amount" class="change-amount-display">0</span>
            <button id="modal-increase-button" class="adjust-button" title="Augmenter la quantité">+</button>
        </div>
        <div id="modal-feedback" class="modal-feedback"></div>
        <div class="modal-actions">
            <button id="modal-cancel-button">Annuler</button>
            <button id="modal-confirm-button">Confirmer</button>
        </div>
    </div>

    <!-- Charger le script JS APRES tout le HTML -->
    <script src="script.js"></script>
</body>
</html>
```

---

### 11.2 `style.css`

```css
/* --- Polices et Réinitialisation --- */
:root {
    --primary-color: #0056b3; /* Bleu principal */
    --primary-color-dark: #004085;
    --secondary-color: #6c757d; /* Gris secondaire */
    --light-gray: #f8f9fa;
    --border-color: #dee2e6;
    --text-color: #212529;
    --text-muted: #6c757d;
    --success-color: #155724; /* Vert succès */
    --success-bg: #d4edda;
    --error-color: #721c24; /* Rouge erreur */
    --error-bg: #f8d7da;
    --warning-color: #856404; /* Orange/Jaune pour Avertissement */
    --warning-bg: #fff3cd;
    --info-color: #004085; /* Bleu info */
    --info-bg: #cce5ff;
    --link-color: #0069d9;
    --font-family-base: 'Inter', sans-serif;
    --border-radius: 0.3rem; /* Rayon de bordure standard */
    --box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    --segment-on-color: #ff0000; /* Rouge vif pour segments ON */
    --segment-off-color: #330000; /* Rouge très sombre pour segments OFF */
    --segment-bg-color: #1a1a1a; /* Fond sombre pour l'afficheur */
    /* Couleurs indicateur stock */
    --stock-ok-color: #28a745;      /* Vert */
    --stock-warning-color: #ffc107; /* Jaune/Orange */
    --stock-critical-color: #dc3545;/* Rouge */
    --stock-unknown-color: #adb5bd; /* Gris */
    /* Couleurs boutons danger (pour purge log) */
    --danger-color: #dc3545;
    --danger-color-dark: #bb2d3b;
}

body {
    font-family: var(--font-family-base);
    line-height: 1.6;
    margin: 0;
    padding: 0;
    padding-top: 70px; /* Espace pour 7-seg fixe */
    background-color: #eef2f7;
    color: var(--text-color);
    position: relative;
    min-height: 100vh;
}

/* --- Conteneur Principal --- */
.container {
    max-width: 1100px;
    margin: 0 auto 25px auto;
    padding: 30px 35px;
    background-color: #ffffff;
    border-radius: var(--border-radius);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.1);
    position: relative;
    z-index: 1;
}

/* --- En-tête --- */
.app-header { display: flex; flex-direction: column; align-items: center; border-bottom: 1px solid var(--border-color); padding-bottom: 20px; margin-bottom: 25px; }
.app-header h1 { color: var(--primary-color); margin: 0; font-weight: 700; font-size: 1.8em; width: 100%; text-align: center; }
.app-subtitle { font-size: 1em; color: var(--text-muted); margin-top: 5px; margin-bottom: 20px; font-weight: 400; width: 100%; text-align: center; }
#auth-section { width: 100%; display: flex; justify-content: center; align-items: center; flex-wrap: wrap; gap: 20px; margin-top: 0; }

/* --- Zone Connexion / Infos Utilisateur --- */
.login-section { background-color: transparent; padding: 0; border: none; margin: 0; text-align: center; display: flex; align-items: center; flex-wrap: wrap; justify-content: center; gap: 10px; }
.login-section label { font-weight: 500; font-size: 0.9em; margin-bottom: 0; }
.login-section input[type="text"], .login-section input[type="password"] { padding: 7px 10px; border: 1px solid #ced4da; border-radius: var(--border-radius); min-width: 150px; font-size: 0.9em; vertical-align: middle; }
.login-section button { padding: 7px 15px; background-color: var(--primary-color); color: white; border: none; border-radius: var(--border-radius); cursor: pointer; font-weight: 500; font-size: 0.9em; transition: background-color 0.2s ease; vertical-align: middle; }
.login-section button:hover { background-color: var(--primary-color-dark); }
.error-message { color: var(--error-color); font-size: 0.85em; margin-top: 5px; text-align: center; width: 100%; }
.user-info { display: flex; align-items: center; justify-content: center; font-size: 0.9em; color: var(--text-muted); gap: 10px; }
.user-info strong { color: var(--primary-color); font-weight: 600; }
.user-info button { padding: 4px 8px; font-size: 0.8em; background-color: var(--secondary-color); color: white; border: none; border-radius: var(--border-radius); cursor: pointer; transition: background-color 0.2s ease; }
.user-info button:hover { background-color: #5a6268; }

/* --- Navigation Principale (Onglets) --- */
.view-navigation { margin-top: 0; margin-bottom: 30px; text-align: center; border-bottom: 1px solid var(--border-color); }
.nav-button { padding: 12px 22px; cursor: pointer; border: 1px solid transparent; border-bottom: none; background-color: transparent; margin: 0 3px -1px 3px; border-radius: var(--border-radius) var(--border-radius) 0 0; font-size: 1em; font-weight: 500; color: var(--secondary-color); position: relative; bottom: -1px; outline: none; transition: background-color 0.2s ease, color 0.2s ease, border-color 0.2s ease, display 0s; }
.nav-button:hover:not(.active):not(:disabled) { color: var(--primary-color); background-color: #e9ecef; }
.nav-button.active { background-color: #ffffff; border-color: var(--border-color); border-bottom: 1px solid #ffffff; font-weight: 600; color: var(--primary-color); z-index: 1; }
.nav-button.protected:disabled { cursor: not-allowed; opacity: 0.6; color: var(--text-muted); }
.nav-button.protected:disabled:hover { background-color: transparent; }

/* --- Styles Communs Sections/Vues --- */
.view-section { padding: 10px 5px 15px 5px; border-top: none; display: none; }
.view-section.active-view { display: block; }
.view-title { text-align: center; margin-top: 0; margin-bottom: 35px; color: var(--text-color); font-size: 1.6em; font-weight: 600; }
.section-subtitle { margin-bottom: 15px; color: var(--text-color); font-size: 1.2em; font-weight: 600; border-bottom: 1px solid #eee; padding-bottom: 8px; }

/* --- Styles Vue Recherche (Chat) --- */
#search-view { display: flex; flex-direction: column; height: 75vh; min-height: 450px; }
.response-section { flex-grow: 1; display: flex; flex-direction: column; overflow: hidden; margin-bottom: 20px; }
.response-section .section-subtitle { flex-shrink: 0; }
.chat-box { background-color: var(--light-gray); border: 1px solid var(--border-color); border-radius: var(--border-radius); padding: 20px; flex-grow: 1; overflow-y: auto; display: flex; flex-direction: column; gap: 15px; }
.search-section { flex-shrink: 0; margin-top: auto; }
.search-box { display: flex; align-items: center; box-shadow: var(--box-shadow); border-radius: var(--border-radius); }
#component-input { flex-grow: 1; padding: 12px 15px; border: 1px solid var(--border-color); border-right: none; border-radius: var(--border-radius) 0 0 var(--border-radius); font-size: 1em; outline: none; transition: border-color 0.2s ease; height: auto; box-sizing: border-box; position: relative; z-index: 1; }
#component-input:focus { border-color: var(--primary-color); z-index: 2; }
#search-button { padding: 12px 25px; border: 1px solid var(--primary-color); background-color: var(--primary-color); color: white; border-radius: 0 var(--border-radius) var(--border-radius) 0; cursor: pointer; font-size: 1em; font-weight: 500; transition: background-color 0.2s ease, border-color 0.2s ease; height: auto; box-sizing: border-box; margin-left: -1px; position: relative; z-index: 1; outline: none; }
#search-button:hover { background-color: var(--primary-color-dark); border-color: var(--primary-color-dark); z-index: 2;}
.message { padding: 10px 16px; border-radius: 18px; max-width: 85%; line-height: 1.5; box-shadow: var(--box-shadow); word-wrap: break-word; font-size: 0.95em; }
.message.user { background: linear-gradient(to right, #0062cc, #0056b3); color: white; border-radius: 18px 18px 5px 18px; align-self: flex-end; margin-left: auto; }
.message.ai { background-color: #ffffff; color: var(--text-color); border: 1px solid #e9ecef; border-radius: 18px 18px 18px 5px; align-self: flex-start; margin-right: auto; line-height: 1.7; padding-bottom: 15px; }
.message.ai a { color: var(--link-color); font-weight: 500; text-decoration: none; }
.message.ai a:hover { text-decoration: underline; }
.message.ai strong { font-weight: 600; color: var(--primary-color-dark);}
.typing-indicator { text-align: left; height: 20px; padding-left: 10px; flex-shrink: 0; }
.typing-indicator i { color: var(--text-muted); font-style: italic; font-size: 0.9em; }
.message.ai .equivalent-item { padding: 8px 0 8px 15px; margin-left: 5px; border-left: 2px solid #e0e0e0; font-size: 0.95em; line-height: 1.6; }
.message.ai .equivalent-item:not(:last-child) { margin-bottom: 5px; }
.message.ai .equivalent-item small { color: var(--text-muted); font-style: italic; font-size: 0.9em; }
.message.ai button.take-button { background-color: var(--success-color); color: white; padding: 5px 10px; font-size: 0.85em; margin-left: 8px; vertical-align: middle; border: none; border-radius: var(--border-radius); cursor: pointer; font-weight: 500; transition: background-color 0.2s ease; }
.message.ai button.take-button:hover { background-color: #126522; }
.external-links-inline { font-size: 0.85em; margin-left: 5px; }
.external-links-inline a { text-decoration: none; font-weight: 500; margin: 0 2px; padding: 1px 3px; border-radius: 3px; }
.external-links-inline a.external-link-inline { color: #fff; background-color: var(--secondary-color); }
.external-links-inline a.external-link-inline.aliexpress { background-color: #ff4747; }
.external-links-inline a:hover { opacity: 0.8; }
.external-links-block { margin-top: 15px; padding-top: 10px; border-top: 1px dashed var(--border-color); font-size: 0.9em; }
.external-links-block a.external-link { display: inline-block; margin-top: 5px; margin-right: 8px; padding: 5px 10px; background-color: #ffc107; color: #333; text-decoration: none; border-radius: var(--border-radius); font-size: 0.85em; font-weight: 500; transition: background-color 0.2s ease; }
.external-links-block a.external-link.aliexpress { background-color: #ff4747; color: white; }
.external-links-block a.external-link:hover { background-color: #e0a800; color: #000; }
.external-links-block a.external-link.aliexpress:hover { background-color: #e02020; }

/* --- Styles Vues Inventaire & Log --- */
.filter-box { display: flex; gap: 15px; align-items: flex-end; margin-bottom: 25px; padding: 20px; background-color: var(--light-gray); border-radius: var(--border-radius); flex-wrap: wrap; border: 1px solid var(--border-color); }
.filter-box .form-group { margin-bottom: 0; flex-grow: 1; }
.filter-box label { margin-bottom: 6px; display: block; font-size: 0.9em; font-weight: 500; color: var(--text-muted);}
.filter-box select, .filter-box input[type="text"] { padding: 9px 12px; width: 100%; border: 1px solid #ced4da; border-radius: var(--border-radius); font-size: 0.9em; box-sizing: border-box; }
.filter-box .filter-search-group { flex-basis: 300px; }
.filter-box button { padding: 9px 18px; background-color: var(--secondary-color); color: white; border: none; border-radius: var(--border-radius); cursor: pointer; height: 38px; font-weight: 500; transition: background-color 0.2s ease; flex-shrink: 0; line-height: 1.5; }
.filter-box button:hover { background-color: #5a6268; }
.data-display-box { margin-top: 25px; overflow-x: auto; border: 1px solid var(--border-color); border-radius: var(--border-radius); }
.data-table { width: 100%; border-collapse: collapse; margin: 0; font-size: 0.9em; }
.data-table th, .data-table td { border: none; border-bottom: 1px solid var(--border-color); padding: 10px 14px; text-align: left; vertical-align: middle; }
.data-table tr:last-child td { border-bottom: none; }
.data-table thead { background-color: #e9ecef; border-bottom: 2px solid var(--border-color); }
.data-table th { font-weight: 600; white-space: nowrap; color: var(--text-muted); text-transform: uppercase; font-size: 0.85em; }
.data-table tbody tr:nth-child(even) { background-color: var(--light-gray); }
.data-table tbody tr:hover { background-color: #e2e6ea; }
.data-table tbody tr.inventory-item-row { cursor: pointer; }
.data-table td a { color: var(--link-color); text-decoration: none; font-weight: 500;}
.data-table td a:hover { text-decoration: underline; }
#inventory-table th:nth-child(4), #inventory-table td:nth-child(4) { text-align: center; font-weight: 500; }
#inventory-table th:nth-child(4), #inventory-table td:nth-child(4) { display: none; }
body.user-logged-in #inventory-table th:nth-child(4), body.user-logged-in #inventory-table td:nth-child(4) { display: table-cell; }
#inventory-table td:nth-last-child(1) { text-align: center; }
#inventory-table td:nth-last-child(2) { text-align: center; font-weight: 600; font-size: 0.95em; }
#inventory-table td:first-child { position: relative; padding-left: 30px; }
#log-table td:nth-child(1) { white-space: nowrap; font-size: 0.9em; color: var(--text-muted); }
#log-table td:nth-child(5), #log-table td:nth-child(6) { text-align: center; font-weight: 600; }
#log-table td:nth-child(3).positive, #log-table td:nth-child(5).positive { color: var(--success-color); }
#log-table td:nth-child(3).negative, #log-table td:nth-child(5).negative { color: var(--error-color); }
.no-results-message { text-align: center; margin: 30px 0; color: var(--text-muted); font-style: italic; }
.danger-small { background-color: var(--danger-color); color: white; padding: 3px 8px; font-size: 0.8em; border: none; border-radius: var(--border-radius); cursor: pointer; transition: background-color 0.2s ease; }
.danger-small:hover:not(:disabled) { background-color: var(--danger-color-dark); }
.danger-small:disabled { opacity: 0.6; cursor: not-allowed; }
button.action-button.danger { background-color: var(--danger-color); color: white; }
button.action-button.danger:hover:not(:disabled) { background-color: var(--danger-color-dark); box-shadow: var(--box-shadow);}

/* --- Indicateurs de Seuil --- */
.stock-indicator { display: inline-block; width: 12px; height: 12px; border-radius: 50%; background-color: var(--stock-unknown-color); position: absolute; left: 10px; top: 50%; transform: translateY(-50%); box-shadow: 0 0 3px rgba(0,0,0,0.2); }
.stock-indicator.level-ok { background-color: var(--stock-ok-color); }
.stock-indicator.level-warning { background-color: var(--stock-warning-color); }
.stock-indicator.level-critical { background-color: var(--stock-critical-color); }
.stock-indicator-chat { display: inline-block; width: 9px; height: 9px; border-radius: 50%; background-color: var(--stock-unknown-color); margin-right: 6px; vertical-align: middle; box-shadow: 0 0 2px rgba(0,0,0,0.15); }
.stock-indicator-chat.level-ok { background-color: var(--stock-ok-color); }
.stock-indicator-chat.level-warning { background-color: var(--stock-warning-color); }
.stock-indicator-chat.level-critical { background-color: var(--stock-critical-color); }

/* --- Contrôles de Pagination --- */
.pagination-controls { margin-top: 30px; text-align: center; }
.pagination-controls button { padding: 7px 14px; margin: 0 6px; background-color: var(--secondary-color); color: white; border: none; border-radius: var(--border-radius); cursor: pointer; font-weight: 500; transition: background-color 0.2s ease; font-size: 0.9em; }
.pagination-controls button:hover:not(:disabled) { background-color: #5a6268; }
.pagination-controls button:disabled { background-color: #adb5bd; cursor: not-allowed; opacity: 0.7; }
.pagination-controls span { display: inline-block; margin: 0 12px; font-size: 0.95em; color: var(--text-color); font-weight: 500;}

/* --- Styles Vue Admin & Paramètres --- */
.admin-section { border: 1px solid var(--border-color); border-radius: var(--border-radius); padding: 30px; background-color: #ffffff; margin-bottom: 30px; box-shadow: var(--box-shadow); }
.admin-section h3 { margin-top: 0; color: var(--primary-color-dark); border-bottom: 1px solid #eee; padding-bottom: 12px; margin-bottom: 25px; font-size: 1.4em; font-weight: 600; }
.admin-section h4 { color: var(--text-color); margin-bottom: 18px; font-size: 1.15em; font-weight: 600; }
.admin-columns { display: flex; gap: 35px; flex-wrap: wrap; }
.category-list-section, .category-form-section { flex: 1; min-width: 320px; }
.form-group { margin-bottom: 20px; }
.form-group label { display: block; margin-bottom: 8px; font-weight: 600; color: var(--text-muted); font-size: 0.9em; }
.form-group input[type="text"], .form-group input[type="number"], .form-group input[type="url"], .form-group input[type="file"], .form-group select, .form-group textarea { width: 100%; padding: 10px 14px; border: 1px solid #ced4da; border-radius: var(--border-radius); box-sizing: border-box; font-size: 0.95em; transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out; }
.form-group input[type="file"] { padding: 8px; background-color: var(--light-gray); }
.form-group input:focus, .form-group select:focus, .form-group textarea:focus { border-color: var(--primary-color); outline: 0; box-shadow: 0 0 0 0.2rem rgba(0, 86, 179, 0.25); }
.form-group textarea { resize: vertical; min-height: 70px; }
.form-group small { display: block; margin-top: 6px; font-size: 0.8em; color: var(--text-muted); }
.form-actions { margin-top: 30px; text-align: right; }
.admin-section button, .admin-section button[type="button"], .admin-section button[type="submit"], button.action-button { padding: 10px 16px; border: none; border-radius: var(--border-radius); cursor: pointer; font-size: 0.9em; font-weight: 500; transition: background-color 0.2s ease, box-shadow 0.2s ease; margin-left: 8px; }
#save-category-button, #update-quantity-button, #save-component-button, button.action-button.success { background-color: var(--success-color); color: white; }
#save-category-button:hover, #update-quantity-button:hover, #save-component-button:hover, button.action-button.success:hover { background-color: #126522; box-shadow: var(--box-shadow); }
#check-stock-button, #cancel-edit-button { background-color: #0dcaf0; color: #000; }
#check-stock-button:hover, #cancel-edit-button:hover { background-color: #0baccc; box-shadow: var(--box-shadow); }
button.action-button { background-color: var(--primary-color); color: white; margin-left: 0; margin-right: 8px; }
button.action-button:hover { background-color: var(--primary-color-dark); box-shadow: var(--box-shadow); }
button.delete-cat { background-color: var(--danger-color); color: white; padding: 5px 10px; font-size: 0.8em; }
button.delete-cat:hover { background-color: var(--danger-color-dark); box-shadow: var(--box-shadow);}
button.edit-cat { background-color: #6c757d; color: white; padding: 5px 10px; font-size: 0.8em; }
button.edit-cat:hover { background-color: #5a6268; box-shadow: var(--box-shadow);}
#category-list { list-style: none; padding: 0; max-height: 350px; overflow-y: auto; border: 1px solid var(--border-color); padding: 15px; background: #ffffff; margin:0; border-radius: var(--border-radius); }
#category-list li { padding: 10px 8px; border-bottom: 1px dashed #eee; display: flex; justify-content: space-between; align-items: center; font-size:0.95em; }
#category-list li:last-child { border-bottom: none; }
#category-list li button { margin-left: 10px; }
#category-list li span:first-child { font-weight: 500; color: var(--text-color); }
#category-list li span:last-child { flex-shrink: 0; }
.feedback-area { margin-top: 20px; padding: 15px; border-radius: var(--border-radius); display: none; text-align: center; font-size: 0.95em; border: 1px solid transparent; font-weight: 500; white-space: normal; }
.feedback-area.success { background-color: var(--success-bg); color: var(--success-color); border-color: #badbcc; display: block; }
.feedback-area.error { background-color: var(--error-bg); color: var(--error-color); border-color: #f5c2c7; display: block; white-space: pre-wrap; text-align: left;}
.feedback-area.warning { background-color: var(--warning-bg); color: var(--warning-color); border-color: #ffeeba; display: block; }
.feedback-area.info { background-color: var(--info-bg); color: var(--info-color); border-color: #b8daff; display: block; }
#component-info { border: 1px dashed var(--border-color); padding: 15px 20px; margin: 20px 0; background-color: var(--light-gray); border-radius: var(--border-radius); }
.inline-group label, .inline-group span, .inline-group input, .inline-group button { display: inline-block; vertical-align: middle; margin-right: 8px; margin-bottom: 0; }
.inline-group label { font-weight: 600; width: auto;}
#current-quantity { font-weight: 700; font-size: 1.1em; color: var(--primary-color); }
#quantity-change { width: 75px; padding: 8px;}
#category-specific-attributes { border: 1px dashed #a2a2a2; padding: 20px 25px; margin-top: 25px; background-color: #f0f5f9; border-radius: var(--border-radius); }
#category-specific-attributes h4{ margin-top: 0; color:#2c3e50; margin-bottom: 18px; font-size: 1.05em; font-weight: 600;}
#category-specific-attributes .form-group{ margin-bottom: 15px; }
#category-specific-attributes label { font-weight: 500; font-size: 0.88em; }
hr { border: 0; height: 1px; background-color: #e9ecef; margin: 30px 0; }

/* --- MODALE DE QUANTITÉ (+/-) --- */
#modal-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.6); z-index: 1000; display: none; opacity: 0; transition: opacity 0.3s ease-in-out; }
#modal-overlay.active { display: block; opacity: 1; }
#quantity-change-modal { position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: white; border-radius: var(--border-radius); padding: 30px 35px; box-shadow: 0 5px 15px rgba(0,0,0,0.3); z-index: 1001; min-width: 350px; max-width: 90%; display: none; opacity: 0; transition: opacity 0.3s ease-in-out, top 0.3s ease-in-out; }
#quantity-change-modal.active { display: block; opacity: 1; }
#quantity-change-modal h3 { margin-top: 0; margin-bottom: 20px; color: var(--primary-color-dark); font-size: 1.3em; text-align: center; }
#quantity-change-modal p { margin-bottom: 15px; font-size: 0.95em; text-align: center; }
#quantity-change-modal p strong { font-weight: 600; }
.quantity-adjuster { display: flex; align-items: center; justify-content: center; gap: 20px; margin: 25px 0; }
.adjust-button { padding: 0; width: 40px; height: 40px; font-size: 1.8em; font-weight: bold; line-height: 1; border: 1px solid var(--border-color); border-radius: 50%; background-color: var(--light-gray); color: var(--text-color); cursor: pointer; transition: background-color 0.2s ease, box-shadow 0.2s ease; display: flex; align-items: center; justify-content: center; }
.adjust-button:hover:not(:disabled) { background-color: #e2e6ea; box-shadow: var(--box-shadow); }
.adjust-button:active:not(:disabled) { background-color: #d6dbe0; }
.adjust-button:disabled { background-color: #e9ecef; color: #adb5bd; cursor: not-allowed; opacity: 0.7; }
.change-amount-display { font-size: 1.8em; font-weight: 600; color: var(--primary-color); min-width: 60px; text-align: center; padding: 5px 10px; background-color: #ffffff; border-radius: var(--border-radius); border: 1px solid var(--border-color); }
#quantity-change-modal .modal-actions { margin-top: 25px; text-align: center; display: flex; justify-content: center; gap: 15px;}
#quantity-change-modal button { padding: 10px 22px; border-radius: var(--border-radius); cursor: pointer; font-size: 1em; font-weight: 500; transition: background-color 0.2s ease; border: none; }
#modal-confirm-button { background-color: var(--primary-color); color: white; }
#modal-confirm-button:hover:not(:disabled) { background-color: var(--primary-color-dark); }
#modal-cancel-button { background-color: var(--secondary-color); color: white; }
#modal-cancel-button:hover { background-color: #5a6268; }
#modal-confirm-button:disabled { background-color: #adb5bd; cursor: not-allowed; }
.modal-feedback { margin-top: 20px; padding: 10px; border-radius: var(--border-radius); font-size: 0.9em; text-align: center; display: none; border: 1px solid transparent; }
.modal-feedback.success { background-color: var(--success-bg); color: var(--success-color); border-color: #badbcc; display: block; }
.modal-feedback.error { background-color: var(--error-bg); color: var(--error-color); border-color: #f5c2c7; display: block; }
.modal-feedback.info { background-color: var(--info-bg); color: var(--info-color); border-color: #b8daff; display: block; }

/* --- AFFICHEUR 7 SEGMENTS --- */
#seven-segment-display { position: fixed; top: 10px; left: 15px; background-color: var(--segment-bg-color); padding: 8px 12px; border-radius: 5px; box-shadow: 0 0 8px rgba(0, 0, 0, 0.5) inset, 0 1px 4px rgba(0,0,0,0.3); display: flex; gap: 6px; z-index: 50; transition: opacity 0.3s ease; }
#seven-segment-display.display-off { opacity: 0.6; }
#seven-segment-display.display-off .segment { background-color: var(--segment-off-color) !important; opacity: 0.4; box-shadow: none;}
.digit { width: 20px; height: 38px; position: relative; }
.segment { background-color: var(--segment-off-color); position: absolute; border-radius: 1px; transition: background-color 0.1s ease; }
.segment.on { background-color: var(--segment-on-color); box-shadow: 0 0 4px var(--segment-on-color); }
.segment-a { top: 0; left: 2px; width: 16px; height: 3px; } .segment-b { top: 2px; right: 0; width: 3px; height: 17px; } .segment-c { top: 19px; right: 0; width: 3px; height: 17px; } .segment-d { bottom: 0; left: 2px; width: 16px; height: 3px; } .segment-e { top: 19px; left: 0; width: 3px; height: 17px; } .segment-f { top: 2px; left: 0; width: 3px; height: 17px; } .segment-g { top: 17.5px; left: 2px; width: 16px; height: 3px; }
.digit.off .segment { background-color: var(--segment-off-color) !important; opacity: 0.4; box-shadow: none;}

/* --- Styles Footer --- */
.app-footer { text-align: center; margin-top: 40px; padding-top: 25px; border-top: 1px solid var(--border-color); font-size: 0.88em; color: var(--text-muted); }

/* --- Responsive --- */
@media (max-width: 992px) { body { padding-top: 65px; } .container { max-width: 90%; margin: 0 auto 15px auto; padding: 20px;} #auth-section { gap: 10px; } .login-section input[type="text"], .login-section input[type="password"] { min-width: 130px;} .admin-columns { flex-direction: column; gap: 25px; } #seven-segment-display { top: 8px; left: 10px; transform: scale(0.95); } #search-view { height: 70vh; min-height: 400px; } }
@media (max-width: 768px) { body { padding-top: 60px; } .nav-button { padding: 10px 15px; font-size: 0.9em;} .filter-box { flex-direction: column; align-items: stretch; gap: 12px; } .filter-box select, .filter-box input[type="text"] { width: 100%; } .message { max-width: 90%; } .view-title { font-size: 1.4em; margin-bottom: 25px;} .pagination-controls button { padding: 6px 10px; } .pagination-controls span { font-size: 0.9em;} .data-table th:nth-child(3), .data-table td:nth-child(3), .data-table th:nth-child(5), .data-table td:nth-child(5) { display: none; } #log-table th:nth-child(2), #log-table td:nth-child(2) { display: none; } th, td { padding: 8px 8px; } #inventory-table td:first-child { padding-left: 25px; } .stock-indicator { width: 10px; height: 10px; left: 8px; } #seven-segment-display { top: 5px; left: 5px; transform: scale(0.9); } #quantity-change-modal { min-width: 300px; padding: 20px 25px; } .adjust-button { width: 35px; height: 35px; font-size: 1.5em; } .change-amount-display { font-size: 1.5em; min-width: 50px;} #search-view { height: 65vh; min-height: 350px; } }
@media (max-width: 480px) { body { padding-top: 0; } .nav-button { font-size: 0.85em; padding: 8px 10px; } th, td { padding: 6px 6px; font-size: 0.85em;} #inventory-table th:nth-child(2), #inventory-table td:nth-child(2), #log-table th:nth-child(6), #log-table td:nth-child(6) { display: none; } .message.ai button.take-button { font-size: 0.8em; padding: 4px 8px; } .message.ai a.external-link { font-size: 0.80em; padding: 4px 8px; margin-right: 6px;} .user-info { flex-direction: column; gap: 5px;} .user-info button { margin-left: 0;} #seven-segment-display { display: none; } #quantity-change-modal { min-width: 90%; max-width: 280px; padding: 15px 20px; } #quantity-change-modal h3 { font-size: 1.1em; } .adjust-button { width: 30px; height: 30px; font-size: 1.3em;} .change-amount-display { font-size: 1.3em; min-width: 40px;} #quantity-change-modal .modal-actions button { font-size: 0.9em; padding: 8px 18px;} #inventory-table td:first-child { padding-left: 22px; } .stock-indicator { width: 8px; height: 8px; left: 6px; } #search-view { height: 60vh; min-height: 300px; } }

```

---

### 11.3 `script.js` (Version finale corrigée)

```javascript
// ----- DÉBUT DU FICHIER script.js -----
// Assure que le code s'exécute après le chargement du DOM
document.addEventListener('DOMContentLoaded', () => {
    "use strict"; // Active le mode strict pour détecter plus d'erreurs

    // --- Configuration et Variables Globales ---
    let currentUser = null;
    let currentUserCode = null;
    const ITEMS_PER_PAGE = 15;
    let isInitialAuthCheckComplete = false;
    let activeSession = null;
    let lastDisplayedDrawer = null; // Mémorise le dernier tiroir affiché
    let categoriesCache = [];

    // --- Configuration Supabase ---
    const SUPABASE_URL = 'https://tjdergojgghzmopuuley.supabase.co';
    const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRqZGVyZ29qZ2doem1vcHV1bGV5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM4MTU0OTUsImV4cCI6MjA1OTM5MTQ5NX0.XejQYEPYoCrgYOwW4T9g2VcmohCdLLndDdwpSYXAwPA';
    const FAKE_EMAIL_DOMAIN = '@stockav.local';

    let supabase = null;

    // --- Initialisation des Clients et Vérifications ---
    try {
        if (!SUPABASE_URL || !SUPABASE_ANON_KEY || !FAKE_EMAIL_DOMAIN) {
            throw new Error("Configuration Supabase (URL, Clé Anon, Domaine Factice) manquante ou incomplète dans script.js !");
        }
        if (window.supabase && typeof window.supabase.createClient === 'function') {
            supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
            console.log("Client Supabase initialisé.");
        } else {
            throw new Error("La librairie Supabase (supabase-js@2) n'est pas chargée correctement avant ce script.");
        }
        if (typeof Papa === 'undefined') {
            console.warn("Librairie PapaParse non chargée. L'import CSV ne fonctionnera pas.");
        }
    } catch (error) {
        console.error("Erreur critique lors de l'initialisation:", error);
        const body = document.querySelector('body');
        if (body) {
             body.innerHTML = `<div style="padding: 20px; background-color: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; border-radius: .25rem; font-family: sans-serif;"><h2>Erreur Critique</h2><p>L'application n'a pas pu démarrer correctement.</p><p><strong>Détails :</strong> ${error.message}</p><p>Veuillez vérifier la console du navigateur (F12) pour plus d'informations et vous assurer que les librairies externes sont correctement chargées.</p></div>`;
        }
        return;
    }

    // --- Récupération des Éléments DOM ---
    const loginArea = document.getElementById('login-area');
    const loginCodeInput = document.getElementById('login-code');
    const loginPasswordInput = document.getElementById('login-password');
    const loginButton = document.getElementById('login-button');
    const loginError = document.getElementById('login-error');
    const userInfoArea = document.getElementById('user-info-area');
    const userDisplay = document.getElementById('user-display');
    const logoutButton = document.getElementById('logout-button');
    const mainNavigation = document.getElementById('main-navigation');
    const searchTabButton = document.getElementById('show-search-view');
    const inventoryTabButton = document.getElementById('show-inventory-view');
    const logTabButton = document.getElementById('show-log-view');
    const adminTabButton = document.getElementById('show-admin-view');
    const settingsTabButton = document.getElementById('show-settings-view');
    const searchView = document.getElementById('search-view');
    const inventoryView = document.getElementById('inventory-view');
    const logView = document.getElementById('log-view');
    const adminView = document.getElementById('admin-view');
    const settingsView = document.getElementById('settings-view');
    const viewSections = document.querySelectorAll('.view-section');
    const protectedButtons = document.querySelectorAll('.nav-button.protected');
    const quantityChangeModal = document.getElementById('quantity-change-modal');
    const modalOverlay = document.getElementById('modal-overlay');
    const modalRefSpan = document.getElementById('modal-component-ref');
    const modalQtySpan = document.getElementById('modal-current-quantity');
    const modalDecreaseButton = document.getElementById('modal-decrease-button');
    const modalIncreaseButton = document.getElementById('modal-increase-button');
    const modalChangeAmountDisplay = document.getElementById('modal-change-amount');
    const modalConfirmButton = document.getElementById('modal-confirm-button');
    const modalCancelButton = document.getElementById('modal-cancel-button');
    const modalFeedback = document.getElementById('modal-feedback');
    const sevenSegmentDisplay = document.getElementById('seven-segment-display');
    const segmentDigits = [
        sevenSegmentDisplay?.querySelector('.digit-1'), sevenSegmentDisplay?.querySelector('.digit-2'),
        sevenSegmentDisplay?.querySelector('.digit-3'), sevenSegmentDisplay?.querySelector('.digit-4')
    ];
    let modalCurrentRef = null;
    let modalInitialQuantity = 0;
    let currentModalChange = 0;
    let currentInventoryPage = 1;
    let currentLogPage = 1;
    let currentInventoryFilters = { category: 'all', search: '' };
    const inventoryTableBody = document.getElementById('inventory-table-body');
    const inventoryCategoryFilter = document.getElementById('inventory-category-filter');
    const inventorySearchFilter = document.getElementById('inventory-search-filter');
    const applyInventoryFilterButton = document.getElementById('apply-inventory-filter-button');
    const inventoryPrevPageButton = document.getElementById('inventory-prev-page');
    const inventoryNextPageButton = document.getElementById('inventory-next-page');
    const inventoryPageInfo = document.getElementById('inventory-page-info');
    const inventoryNoResults = document.getElementById('inventory-no-results');
    const logTableBody = document.getElementById('log-table-body');
    const logPrevPageButton = document.getElementById('log-prev-page');
    const logNextPageButton = document.getElementById('log-next-page');
    const logPageInfo = document.getElementById('log-page-info');
    const logNoResults = document.getElementById('log-no-results');
    const categoryList = document.getElementById('category-list');
    const categoryForm = document.getElementById('category-form');
    const categoryNameInput = document.getElementById('category-name');
    const categoryAttributesInput = document.getElementById('category-attributes');
    const categoryIdEditInput = document.getElementById('category-id-edit');
    const cancelEditButton = document.getElementById('cancel-edit-button');
    const categoryFormTitle = document.getElementById('category-form-title');
    const adminFeedbackDiv = document.getElementById('admin-feedback');
    const stockForm = document.getElementById('stock-form');
    const componentRefAdminInput = document.getElementById('component-ref-admin');
    const checkStockButton = document.getElementById('check-stock-button');
    const componentInfoDiv = document.getElementById('component-info');
    const currentQuantitySpan = document.getElementById('current-quantity');
    const updateQuantityButton = document.getElementById('update-quantity-button');
    const quantityChangeInput = document.getElementById('quantity-change');
    const componentCategorySelectAdmin = document.getElementById('component-category-select');
    const specificAttributesDiv = document.getElementById('category-specific-attributes');
    const componentDescInput = document.getElementById('component-desc');
    const componentMfgInput = document.getElementById('component-mfg');
    const componentDatasheetInput = document.getElementById('component-datasheet');
    const componentInitialQuantityInput = document.getElementById('component-initial-quantity');
    const componentDrawerAdminInput = document.getElementById('component-drawer-admin');
    const componentThresholdInput = document.getElementById('component-threshold');
    const saveComponentButton = document.getElementById('save-component-button');
    const searchButtonChat = document.getElementById('search-button');
    const componentInputChat = document.getElementById('component-input');
    const responseOutputChat = document.getElementById('response-output');
    const loadingIndicatorChat = document.getElementById('loading-indicator');
    const exportInventoryCsvButton = document.getElementById('export-inventory-csv-button');
    const exportLogTxtButton = document.getElementById('export-log-txt-button');
    const exportFeedbackDiv = document.getElementById('export-feedback');
    const importCsvFileInput = document.getElementById('import-csv-file');
    const importInventoryCsvButton = document.getElementById('import-inventory-csv-button');
    const importFeedbackDiv = document.getElementById('import-feedback');

    // --- État et Historique du Chat ---
    let chatHistory = [];
    let conversationState = {
        awaitingEquivalentChoice: false,
        awaitingQuantityConfirmation: false,
        originalRefChecked: null,
        potentialEquivalents: [],
        chosenRefForStockCheck: null,
        availableQuantity: 0,
        criticalThreshold: null
    };
    const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

    // --- Helper: Statut du Stock ---
    function getStockStatus(quantity, threshold) {
        if (quantity === undefined || quantity === null || isNaN(quantity)) return 'unknown';
        quantity = Number(quantity);
        threshold = (threshold === undefined || threshold === null || isNaN(threshold)) ? -1 : Number(threshold);
        if (quantity <= 0) return 'critical';
        if (threshold >= 0 && quantity <= threshold) return 'warning';
        return 'ok';
    }

    // --- Helper: Créer le HTML pour l'indicateur de stock (chat) ---
    function createStockIndicatorHTML(quantity, threshold) {
        const status = getStockStatus(quantity, threshold);
        const statusText = status.toUpperCase();
        const thresholdText = (threshold === undefined || threshold === null || threshold < 0) ? 'N/A' : threshold;
        const qtyText = (quantity === undefined || quantity === null) ? 'N/A' : quantity;
        const title = `Stock: ${statusText} (Qté: ${qtyText}, Seuil: ${thresholdText})`;
        return `<span class="stock-indicator-chat level-${status}" title="${title}"></span>`;
    }

    // --- Authentification ---
    async function handleLogin() {
        if (!supabase) { loginError.textContent = "Erreur: Client Supabase non initialisé."; loginError.style.display = 'block'; return; }
        const code = loginCodeInput.value.trim().toLowerCase();
        const password = loginPasswordInput.value.trim();
        loginError.style.display = 'none';
        if (!code || !password) { loginError.textContent = "Code et mot de passe requis."; loginError.style.display = 'block'; return; }
        const email = code + FAKE_EMAIL_DOMAIN;
        loginButton.disabled = true; loginError.textContent = "Connexion..."; loginError.style.display = 'block'; loginError.style.color = 'var(--text-muted)';
        try {
            const { data, error } = await supabase.auth.signInWithPassword({ email: email, password: password });
            if (error) {
                console.error("Erreur connexion Supabase:", error.message);
                loginError.textContent = (error.message.includes("Invalid login credentials")) ? "Code ou mot de passe incorrect." : "Erreur connexion.";
                loginError.style.color = 'var(--error-color)'; loginError.style.display = 'block'; loginCodeInput.focus();
            } else {
                console.log("Demande de connexion réussie pour:", data.user?.email);
                loginError.style.display = 'none'; loginCodeInput.value = ''; loginPasswordInput.value = '';
            }
        } catch (err) {
             console.error("Erreur JS connexion:", err);
             loginError.textContent = "Erreur inattendue lors de la connexion.";
             loginError.style.color = 'var(--error-color)'; loginError.style.display = 'block';
        } finally {
             loginButton.disabled = false;
        }
    }
    async function handleLogout() {
        if (!supabase) { console.error("Client Supabase non initialisé lors du logout."); alert("Erreur: Client non initialisé."); return; }
        console.log("Tentative de déconnexion...");
        const { error } = await supabase.auth.signOut();
        if (error) {
            console.error("Erreur déconnexion Supabase:", error.message, error);
            alert(`Erreur déconnexion: ${error.message}. Vérifiez la console.`);
        } else {
            console.log("Déconnexion Supabase réussie.");
             if (searchView?.classList.contains('active-view') && chatHistory.length > 0) {
                 displayWelcomeMessage();
             }
             lastDisplayedDrawer = null;
             updateSevenSegmentDisplay(null);
        }
    }

    // --- Gestionnaire d'état d'authentification ---
    async function setupAuthListener() {
        if (!supabase) { console.error("Listener Auth impossible: Supabase non initialisé."); return; }
        try {
            console.log("Vérification session initiale (getSession)...");
            const { data: { session } } = await supabase.auth.getSession();
            activeSession = session;
            isInitialAuthCheckComplete = true;
            if (session) {
                console.log("Session initiale trouvée (getSession).");
                handleUserConnected(session.user, true);
            } else {
                console.log("Pas de session initiale trouvée (getSession).");
                handleUserDisconnected(true);
            }
        } catch (error) {
            console.error("Erreur critique getSession initiale:", error);
            isInitialAuthCheckComplete = true;
            handleUserDisconnected(true);
        }
        supabase.auth.onAuthStateChange((event, session) => {
            console.log(`Auth Event: ${event}`, session ? `Session pour ${session.user.email}` : "Pas de session");
            activeSession = session;
            if (!isInitialAuthCheckComplete) {
                console.log("Auth event reçu avant fin vérif initiale, attente...");
                return;
            }
            switch (event) {
                case 'SIGNED_IN':
                    handleUserConnected(session.user, false);
                    break;
                case 'SIGNED_OUT':
                    handleUserDisconnected(false);
                    break;
                case 'TOKEN_REFRESHED':
                    console.log("Token rafraîchi.");
                    if (session && currentUser && session.user.id !== currentUser.id) {
                        handleUserConnected(session.user, false);
                    } else if (!session && currentUser) {
                        handleUserDisconnected(false);
                    }
                    break;
                case 'USER_UPDATED':
                    console.log("Utilisateur mis à jour:", session?.user);
                    if (session) handleUserConnected(session.user, false);
                    break;
                case 'PASSWORD_RECOVERY':
                    console.log("Événement de récupération de mot de passe.");
                    break;
                default:
                    console.log("Événement Auth non géré ou redondant:", event);
            }
        });
    }

    // --- Mise à jour UI/État pour Authentification ---
    function handleUserConnected(user, isInitialLoad) {
        const previousUserId = currentUser?.id;
        currentUser = user;
        currentUserCode = currentUser.email.split('@')[0];
        console.log(`Utilisateur connecté: ${currentUserCode} (ID: ${currentUser.id})`);

        document.body.classList.add('user-logged-in');
        if(loginArea) loginArea.style.display = 'none';
        if(userInfoArea) userInfoArea.style.display = 'flex';
        if(userDisplay) userDisplay.textContent = currentUserCode.toUpperCase();
        if(loginError) loginError.style.display = 'none';
        protectedButtons.forEach(btn => {
            if (btn.id === 'show-settings-view') {
                if (currentUserCode === 'zine') {
                    btn.style.display = 'inline-block'; btn.disabled = false; btn.title = '';
                } else {
                    btn.style.display = 'none'; btn.disabled = true; btn.title = 'Accès restreint';
                }
            } else {
                btn.style.display = 'inline-block'; btn.disabled = false; btn.title = '';
            }
        });

        if (categoriesCache.length === 0) { getCategories(); }

        if (!isInitialLoad && user.id !== previousUserId) {
            console.log("Nouvelle connexion détectée (utilisateur différent).");
            invalidateCategoriesCache();
            if (searchView?.classList.contains('active-view')) { displayWelcomeMessage(); }
        } else if (isInitialLoad) {
            const activeView = document.querySelector('.view-section.active-view');
             if (activeView?.id === 'inventory-view') { populateInventoryFilters(); displayInventory(); }
             else if (activeView?.id === 'log-view') { displayLog(); }
             else if (activeView?.id === 'admin-view') { loadAdminData(); }
             else if (activeView?.id === 'settings-view') {
                 if (currentUserCode === 'zine') { loadSettingsData(); }
                 else { console.warn("Accès initial à Settings refusé pour", currentUserCode); setActiveView(searchView, searchTabButton); }
             }
             else if (searchView?.classList.contains('active-view') && chatHistory.length === 0) { displayWelcomeMessage(); }
             else if (!activeView) { setActiveView(searchView, searchTabButton); }
        }
        updateSevenSegmentDisplay();
    }
    function handleUserDisconnected(isInitialLoad) {
        console.log("Utilisateur déconnecté ou session absente.");
        currentUser = null;
        currentUserCode = null;
        document.body.classList.remove('user-logged-in');
        if(userInfoArea) userInfoArea.style.display = 'none';
        if(loginArea) loginArea.style.display = 'block';
        protectedButtons.forEach(btn => { btn.style.display = 'none'; btn.disabled = true; btn.title = 'Connexion requise'; });

        hideQuantityModal();
        lastDisplayedDrawer = null;
        updateSevenSegmentDisplay(null);

        if (!isInitialLoad) {
            invalidateCategoriesCache();
            clearProtectedViewData();
            if (searchView?.classList.contains('active-view') && chatHistory.length > 0) { displayWelcomeMessage(); }
        }

        const activeView = document.querySelector('.view-section.active-view');
        if (activeView && (activeView.id === 'log-view' || activeView.id === 'admin-view' || activeView.id === 'settings-view')) {
            console.log("Redirection vers vue recherche car déconnecté d'une vue protégée.");
            setActiveView(searchView, searchTabButton);
        } else if (isInitialLoad && !activeView) { setActiveView(searchView, searchTabButton); }
    }
    function clearProtectedViewData() {
        if(inventoryTableBody) inventoryTableBody.innerHTML = '';
        if(logTableBody) logTableBody.innerHTML = '';
        if(inventoryPageInfo) inventoryPageInfo.textContent = 'Page - / -';
        if(inventoryPrevPageButton) inventoryPrevPageButton.disabled = true;
        if(inventoryNextPageButton) inventoryNextPageButton.disabled = true;
        if(logPageInfo) logPageInfo.textContent = 'Page - / -';
        if(logPrevPageButton) logPrevPageButton.disabled = true;
        if(logNextPageButton) logNextPageButton.disabled = true;
        if (categoryList) categoryList.innerHTML = '';
        resetCategoryForm();
        resetStockForm();
        if (componentInfoDiv) componentInfoDiv.style.display = 'none';
        if (adminFeedbackDiv) { adminFeedbackDiv.style.display = 'none'; adminFeedbackDiv.textContent = '';}
        if(exportFeedbackDiv) { exportFeedbackDiv.style.display = 'none'; exportFeedbackDiv.textContent = '';}
        if(importFeedbackDiv) { importFeedbackDiv.style.display = 'none'; importFeedbackDiv.textContent = '';}
        if(importCsvFileInput) importCsvFileInput.value = '';
        const logActionsHeader = document.querySelector('#log-table th.log-actions-header'); if (logActionsHeader) logActionsHeader.remove();
        const purgeButtonContainer = document.getElementById('purge-log-container'); if (purgeButtonContainer) purgeButtonContainer.style.display = 'none';
        console.log("Données des vues protégées effacées de l'UI.");
    }

    // --- Navigation ---
    function setActiveView(viewToShow, buttonToActivate){
        if (!viewToShow) { viewToShow = searchView; buttonToActivate = searchTabButton; console.warn("setActiveView: Vue invalide, retour à la recherche.");}
        if (viewToShow.classList.contains('active-view')) { console.log(`Vue ${viewToShow.id} déjà active.`); return; }

        const isProtected = viewToShow.id === 'log-view' || viewToShow.id === 'admin-view' || viewToShow.id === 'settings-view';
        let canAccess = true;
        if (isProtected && !currentUser) {
            canAccess = false; console.warn(`Accès refusé (non connecté): ${viewToShow.id}`); if (loginError) { loginError.textContent="Connexion requise."; loginError.style.color = 'var(--error-color)'; loginError.style.display='block'; } loginCodeInput?.focus();
        } else if (viewToShow.id === 'settings-view' && currentUserCode !== 'zine') {
            canAccess = false; console.warn(`Accès refusé (pas 'zine'): ${viewToShow.id}`);
        }
        if (!canAccess) { return; }

        viewSections.forEach(section => { section.style.display = 'none'; section.classList.remove('active-view'); });
        document.querySelectorAll('.nav-button').forEach(button => { button.classList.remove('active'); });

        viewToShow.style.display = 'block';
        viewToShow.classList.add('active-view');
        if (buttonToActivate) { buttonToActivate.classList.add('active'); }
        else { const realButtonId = `show-${viewToShow.id}`; const matchingButton = document.getElementById(realButtonId); if (matchingButton) matchingButton.classList.add('active'); }
        console.log(`Activation vue: ${viewToShow.id}`);

        if (viewToShow === searchView && chatHistory.length === 0) { displayWelcomeMessage(); }
        else if (viewToShow === inventoryView) { populateInventoryFilters(); displayInventory(); }
        else if (viewToShow === logView && currentUser) { displayLog(); }
        else if (viewToShow === adminView && currentUser) { loadAdminData(); }
        else if (viewToShow === settingsView && currentUser && currentUserCode === 'zine') { loadSettingsData(); }
    }

    // --- LOGIQUE INVENTAIRE ---
    async function populateInventoryFilters() {
        if (!inventoryCategoryFilter) return;
        const currentVal = inventoryCategoryFilter.value;
        inventoryCategoryFilter.innerHTML = '<option value="all">Toutes</option>';
        try {
            const categories = await getCategories();
            if (categories && categories.length > 0) {
                categories.forEach(cat => { const option = document.createElement('option'); option.value = cat.id; option.textContent = cat.name; inventoryCategoryFilter.appendChild(option); });
                if (inventoryCategoryFilter.querySelector(`option[value="${currentVal}"]`)) { inventoryCategoryFilter.value = currentVal; }
                else { inventoryCategoryFilter.value = 'all'; }
            } else { console.warn("Aucune catégorie trouvée pour filtres."); }
        } catch (error) { console.error("Erreur remplissage filtres catégorie:", error); }
    }
    async function displayInventory(page = currentInventoryPage) {
        currentInventoryPage = page;
        if (!inventoryTableBody || !supabase) { console.warn("displayInventory: Prérequis manquants."); return; }
        inventoryTableBody.innerHTML = '<tr class="loading-row"><td colspan="7" style="text-align:center;"><i>Chargement...</i></td></tr>'; // Updated colspan
        if(inventoryNoResults) inventoryNoResults.style.display = 'none';
        if(inventoryPrevPageButton) inventoryPrevPageButton.disabled = true;
        if(inventoryNextPageButton) inventoryNextPageButton.disabled = true;
        if(inventoryPageInfo) inventoryPageInfo.textContent = 'Chargement...';
        const itemsPerPage = ITEMS_PER_PAGE;
        const startIndex = (currentInventoryPage - 1) * itemsPerPage;
        const endIndex = startIndex + itemsPerPage - 1;
        try {
            let query = supabase.from('inventory').select('*, categories ( name ), critical_threshold', { count: 'exact' });
            const searchValue = inventorySearchFilter?.value.trim() || '';
            const categoryValue = inventoryCategoryFilter?.value || 'all';
            if (searchValue) { const searchColumns = ['ref', 'description', 'manufacturer']; if (currentUser) { searchColumns.push('drawer'); } query = query.or(searchColumns.map(col => `${col}.ilike.%${searchValue}%`).join(',')); }
            if (categoryValue !== 'all') { query = query.eq('category_id', categoryValue); }
            query = query.order('ref', { ascending: true }).range(startIndex, endIndex);
            const { data, error, count } = await query;
            inventoryTableBody.innerHTML = '';
            if (error) { throw new Error(`Erreur DB inventaire: ${error.message}`); }
            const totalItems = count || 0; const totalPages = Math.ceil(totalItems / itemsPerPage);
            if (totalItems === 0) { if(inventoryNoResults) { inventoryNoResults.textContent = `Aucun composant trouvé${searchValue || categoryValue !== 'all' ? ' pour ces filtres' : ''}.`; inventoryNoResults.style.display = 'block'; } if(inventoryPageInfo) inventoryPageInfo.textContent = 'Page 0 / 0'; }
            else { if(inventoryNoResults) inventoryNoResults.style.display = 'none';
                data.forEach(item => {
                    const row = inventoryTableBody.insertRow(); row.dataset.ref = item.ref; row.classList.add('inventory-item-row');
                    const refCell = row.insertCell(); const status = getStockStatus(item.quantity, item.critical_threshold); const indicatorSpan = document.createElement('span'); indicatorSpan.classList.add('stock-indicator', `level-${status}`); indicatorSpan.title = `Stock: ${status.toUpperCase()} (Qté: ${item.quantity}, Seuil: ${item.critical_threshold ?? 'N/A'})`; refCell.appendChild(indicatorSpan); refCell.appendChild(document.createTextNode(item.ref));
                    row.insertCell().textContent = item.description || '-'; row.insertCell().textContent = item.categories?.name ?? 'N/A'; row.insertCell().textContent = item.drawer || '-'; row.insertCell().textContent = item.manufacturer || '-';
                    const qtyCell = row.insertCell(); qtyCell.textContent = item.quantity; qtyCell.style.textAlign = 'center';
                    const dsCell = row.insertCell(); dsCell.style.textAlign = 'center'; if (item.datasheet) { try { new URL(item.datasheet); const link = document.createElement('a'); link.href = item.datasheet; link.textContent = 'Voir'; link.target = '_blank'; link.rel = 'noopener noreferrer'; dsCell.appendChild(link); } catch (_) { dsCell.textContent = '-'; } } else { dsCell.textContent = '-'; }
                });
                 currentInventoryPage = Math.max(1, Math.min(currentInventoryPage, totalPages || 1));
                 if(inventoryPageInfo) inventoryPageInfo.textContent = `Page ${currentInventoryPage} / ${totalPages || 1}`;
                 if(inventoryPrevPageButton) inventoryPrevPageButton.disabled = currentInventoryPage === 1;
                 if(inventoryNextPageButton) inventoryNextPageButton.disabled = currentInventoryPage >= totalPages;
            }
        } catch (err) { console.error("Erreur affichage inventaire:", err); inventoryTableBody.innerHTML = `<tr><td colspan="7" class="error-message" style="text-align:center;">Erreur chargement: ${err.message}</td></tr>`; if(inventoryPageInfo) inventoryPageInfo.textContent = 'Erreur'; } // Updated colspan
    }


    // --- LOGIQUE HISTORIQUE ---
    async function displayLog(page = currentLogPage) {
        const logTable = document.getElementById('log-table');
        const purgeButtonContainerId = 'purge-log-container';
        let purgeButtonContainer = document.getElementById(purgeButtonContainerId);
        const isZine = currentUserCode === 'zine';

        if (!logTable) { console.error("Element log-table non trouvé !"); return; } // Safety check

        // Gérer affichage colonne/bouton purge
        const headerRow = logTable.querySelector('thead tr');
        let actionHeader = headerRow?.querySelector('th.log-actions-header');

        if (isZine) {
            if (!actionHeader && headerRow) {
                 actionHeader = document.createElement('th'); actionHeader.textContent = 'Actions'; actionHeader.classList.add('log-actions-header'); headerRow.appendChild(actionHeader);
            }
            if (!purgeButtonContainer && logTable.parentElement) {
                purgeButtonContainer = document.createElement('div'); purgeButtonContainer.id = purgeButtonContainerId; purgeButtonContainer.style.cssText = 'text-align: right; margin-top: 15px;';
                purgeButtonContainer.innerHTML = `<button id="purge-all-logs-button" class="action-button danger" title="Supprimer définitivement TOUT l'historique">Purger Tout l'Historique</button>`;
                logTable.parentElement.insertAdjacentElement('afterend', purgeButtonContainer);
                document.getElementById('purge-all-logs-button')?.addEventListener('click', handleDeleteAllLogs);
            }
             if (purgeButtonContainer) purgeButtonContainer.style.display = 'block';
        } else {
            if (actionHeader) actionHeader.remove(); // Supprime l'en-tête si pas zine
            // Supprime aussi les cellules d'action dans tbody (important si user change sans recharger)
             logTable.querySelectorAll('td.log-actions-cell').forEach(td => td.remove());
            if (purgeButtonContainer) purgeButtonContainer.style.display = 'none';
        }

        if (!currentUser) { console.warn("displayLog: Non connecté."); return; }
        currentLogPage = page;
        if (!logTableBody || !supabase) { console.warn("displayLog: Prérequis manquants."); return; }

        const colspanValue = headerRow?.cells.length || (isZine ? 7 : 6); // Calcul dynamique du colspan
        logTableBody.innerHTML = `<tr class="loading-row"><td colspan="${colspanValue}" style="text-align:center; color: var(--text-muted);"><i>Chargement historique...</i></td></tr>`;
        if(logNoResults) logNoResults.style.display = 'none'; if(logPrevPageButton) logPrevPageButton.disabled = true; if(logNextPageButton) logNextPageButton.disabled = true; if(logPageInfo) logPageInfo.textContent = 'Chargement...';
        const itemsPerPage = ITEMS_PER_PAGE; const startIndex = (currentLogPage - 1) * itemsPerPage; const endIndex = startIndex + itemsPerPage - 1;

        try {
            const { data, error, count } = await supabase.from('logs').select('id, created_at, user_code, component_ref, quantity_change, quantity_after', { count: 'exact' }).order('created_at', { ascending: false }).range(startIndex, endIndex);
            logTableBody.innerHTML = ''; if (error) { throw new Error(`Erreur DB logs: ${error.message}`); }
            const totalItems = count || 0; const totalPages = Math.ceil(totalItems / itemsPerPage);
            if (totalItems === 0) { if(logNoResults) { logNoResults.textContent = "Historique vide."; logNoResults.style.display = 'block'; } if (purgeButtonContainer) purgeButtonContainer.style.display = 'none'; if(logPageInfo) logPageInfo.textContent = 'Page 0 / 0'; }
            else { if(logNoResults) logNoResults.style.display = 'none'; if (isZine && purgeButtonContainer) purgeButtonContainer.style.display = 'block';
                data.forEach(entry => {
                    const row = logTableBody.insertRow();
                    row.insertCell().textContent = formatLogTimestamp(new Date(entry.created_at));
                    row.insertCell().textContent = entry.user_code || 'N/A';
                    const actionCell = row.insertCell(); actionCell.textContent = entry.quantity_change > 0 ? 'Ajout' : 'Retrait'; actionCell.classList.add(entry.quantity_change > 0 ? 'positive' : 'negative');
                    row.insertCell().textContent = entry.component_ref;
                    const changeCell = row.insertCell(); changeCell.textContent = entry.quantity_change > 0 ? `+${entry.quantity_change}` : `${entry.quantity_change}`; changeCell.classList.add(entry.quantity_change > 0 ? 'positive' : 'negative');
                    row.insertCell().textContent = entry.quantity_after;
                    if (isZine) { const actionTd = row.insertCell(); actionTd.classList.add('log-actions-cell'); actionTd.style.textAlign = 'center'; const deleteButton = document.createElement('button'); deleteButton.textContent = 'Suppr.'; deleteButton.classList.add('delete-log-button', 'danger-small'); deleteButton.title = `Supprimer ID: ${entry.id}`; deleteButton.dataset.logId = entry.id; actionTd.appendChild(deleteButton); }
                });
                 currentLogPage = Math.max(1, Math.min(currentLogPage, totalPages || 1));
                 if(logPageInfo) logPageInfo.textContent = `Page ${currentLogPage} / ${totalPages || 1}`;
                 if(logPrevPageButton) logPrevPageButton.disabled = currentLogPage === 1;
                 if(logNextPageButton) logNextPageButton.disabled = currentLogPage >= totalPages;
            }
        } catch (err) { console.error("Erreur affichage historique:", err); logTableBody.innerHTML = `<tr><td colspan="${colspanValue}" class="error-message" style="color: var(--error-color); text-align: center;">Erreur chargement: ${err.message}</td></tr>`; if(logPageInfo) logPageInfo.textContent = 'Erreur'; if (purgeButtonContainer) purgeButtonContainer.style.display = 'none'; }
    }
    function formatLogTimestamp(date) { try { return date.toLocaleString('fr-FR', { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit' }); } catch(e) { return date.toISOString(); } }
    async function addLogEntry(itemRef, change, newQuantity) { if (!currentUser || !currentUserCode || !supabase) { return; } const logData = { user_id: currentUser.id, user_code: currentUserCode.toUpperCase(), component_ref: itemRef, quantity_change: change, quantity_after: newQuantity }; console.log("Tentative log:", logData); try { const { error: logError } = await supabase.from('logs').insert(logData); if (logError) { console.error("Erreur écriture log:", logError); } else { console.log("Log enregistré."); if (logView?.classList.contains('active-view') && currentLogPage === 1) { displayLog(1); } } } catch (err) { console.error("Erreur JS log:", err); } }
    async function handleDeleteSingleLog(event) { const targetButton = event.target.closest('button.delete-log-button'); if (!targetButton) return; const logId = targetButton.dataset.logId; if (!logId) { alert("Erreur: ID log manquant."); return; } if (currentUserCode !== 'zine') { alert("Action non autorisée."); return; } if (!confirm(`Supprimer log ID: ${logId} ?`)) { return; } targetButton.disabled = true; targetButton.textContent = '...'; try { const { error } = await supabase.from('logs').delete().eq('id', logId); if (error) { throw new Error(`Erreur DB suppression log: ${error.message}`); } console.log(`Log ID ${logId} supprimé.`); displayLog(currentLogPage); } catch (err) { console.error("Erreur suppression log:", err); alert(`Erreur: ${err.message}`); targetButton.disabled = false; targetButton.textContent = 'Suppr.'; } }
    async function handleDeleteAllLogs() { if (currentUserCode !== 'zine') { alert("Action non autorisée."); return; } if (!confirm("ATTENTION !\nSupprimer TOUT l'historique ?\nIRRÉVERSIBLE !")) { return; } if (!confirm("Seconde confirmation : Vraiment tout effacer ?")) { return; } const purgeButton = document.getElementById('purge-all-logs-button'); if (purgeButton) { purgeButton.disabled = true; purgeButton.textContent = 'Suppression...'; } const feedbackDiv = document.getElementById('log-feedback') || adminFeedbackDiv || document.createElement('div'); const showFeedback = (msg, type) => { if (!feedbackDiv.parentElement && logView) { feedbackDiv.id="log-feedback"; logView.insertBefore(feedbackDiv, logView.querySelector('.log-display')); } feedbackDiv.textContent = msg; feedbackDiv.className=`feedback-area ${type}`; feedbackDiv.style.display='block';}; showFeedback("Suppression de tout l'historique...", 'warning'); try { const { error } = await supabase.from('logs').delete().neq('id', '00000000-0000-0000-0000-000000000000'); if (error) { throw new Error(`Erreur DB purge logs: ${error.message}`); } console.log("Logs purgés."); showFeedback("Historique purgé avec succès.", 'success'); displayLog(1); } catch (err) { console.error("Erreur purge logs:", err); showFeedback(`Erreur purge: ${err.message}`, 'error'); if (purgeButton) { purgeButton.disabled = false; purgeButton.textContent = "Purger Tout"; } } }

    // --- VUE ADMIN ---
    async function getCategories() { if (categoriesCache.length > 0) { return categoriesCache; } if (!supabase) { return []; } console.log("Fetching categories..."); try { const { data, error } = await supabase.from('categories').select('id, name, attributes').order('name', { ascending: true }); if (error) { throw new Error(`Erreur DB cat: ${error.message}`); } categoriesCache = data || []; console.log(`Categories cached: ${categoriesCache.length}.`); return categoriesCache; } catch (err) { console.error("Erreur lecture cat:", err); if (adminView?.classList.contains('active-view')) { showAdminFeedback(`Erreur chargement cat: ${err.message}`, 'error'); } return []; } }
    function invalidateCategoriesCache() { categoriesCache = []; console.log("Cache cat invalidé."); }
    async function loadAdminData() { if (!currentUser) return; const catManager = document.getElementById('category-manager'); const stockManager = document.getElementById('stock-manager'); if (catManager) catManager.style.display = 'block'; if (stockManager) stockManager.style.display = 'block'; if (adminFeedbackDiv) { adminFeedbackDiv.style.display = 'none'; adminFeedbackDiv.textContent = ''; } resetStockForm(); try { await loadCategoriesAdmin(); } catch (error) { console.error("Erreur loadAdminData:", error); showAdminFeedback(`Erreur load admin: ${error.message}`, 'error'); } }
    async function loadCategoriesAdmin() { if (categoryList) categoryList.innerHTML = '<li><i>Chargement...</i></li>'; if (componentCategorySelectAdmin) componentCategorySelectAdmin.innerHTML = '<option value="">Chargement...</option>'; try { const categories = await getCategories(); if (categoryList) categoryList.innerHTML = ''; if (componentCategorySelectAdmin) componentCategorySelectAdmin.innerHTML = '<option value="">-- Sélectionner --</option>'; if (categories && categories.length > 0) { categories.forEach(cat => { if (categoryList) { const li = document.createElement('li'); li.dataset.categoryId = cat.id; li.innerHTML = `<span>${cat.name}</span><span class="category-actions"><button class="edit-cat">Modif</button> <button class="delete-cat danger-small">Suppr.</button></span>`; categoryList.appendChild(li); } if (componentCategorySelectAdmin) { const option = document.createElement('option'); option.value = cat.id; option.textContent = cat.name; option.dataset.attributes = cat.attributes || ''; componentCategorySelectAdmin.appendChild(option); } }); } else { if (categoryList) categoryList.innerHTML = '<li>Aucune catégorie.</li>'; if (componentCategorySelectAdmin) componentCategorySelectAdmin.innerHTML = '<option value="">Aucune</option>'; } } catch (error) { console.error("Erreur loadCategoriesAdmin:", error); if (categoryList) categoryList.innerHTML = '<li>Erreur chargement.</li>'; if (componentCategorySelectAdmin) componentCategorySelectAdmin.innerHTML = '<option value="">Erreur</option>'; } }
    function addCategoryEventListeners() { categoryList?.addEventListener('click', async (event) => { const targetButton = event.target.closest('button'); if (!targetButton) return; const listItem = targetButton.closest('li[data-category-id]'); if (!listItem) return; const categoryId = listItem.dataset.categoryId; if (!categoryId || !supabase) return; const category = categoriesCache.find(c => c.id === categoryId); if (!category) { console.error(`Cat ID ${categoryId} non trouvée cache.`); showAdminFeedback('Erreur interne: Cat non trouvée.', 'error'); return; } if (targetButton.classList.contains('edit-cat')) { if(categoryIdEditInput) categoryIdEditInput.value = category.id; if(categoryNameInput) categoryNameInput.value = category.name; if(categoryAttributesInput) categoryAttributesInput.value = category.attributes || ''; if(categoryFormTitle) categoryFormTitle.textContent = `Modif: ${category.name}`; if(cancelEditButton) cancelEditButton.style.display = 'inline-block'; categoryNameInput?.focus(); showAdminFeedback(`Modif "${category.name}"...`, 'info'); } else if (targetButton.classList.contains('delete-cat')) { if (!confirm(`Supprimer cat "${category.name}" ?`)) return; showAdminFeedback(`Suppression "${category.name}"...`, "info"); targetButton.disabled = true; targetButton.closest('.category-actions')?.querySelectorAll('button').forEach(b => b.disabled = true); try { const { error } = await supabase.from('categories').delete().eq('id', categoryId); if (error && error.code === '23503') { throw new Error(`Impossible supprimer: Cat "${category.name}" utilisée.`); } else if (error) { throw new Error(`DB Error: ${error.message}`); } showAdminFeedback(`Cat "${category.name}" supprimée.`, 'success'); invalidateCategoriesCache(); await loadCategoriesAdmin(); if (categoryIdEditInput?.value === categoryId) { resetCategoryForm(); } await populateInventoryFilters(); } catch (err) { console.error("Erreur suppression cat:", err); showAdminFeedback(`Erreur suppression: ${err.message}`, 'error'); const stillExistingLi = categoryList.querySelector(`li[data-category-id="${categoryId}"]`); if (stillExistingLi) { stillExistingLi.querySelectorAll('button').forEach(b => b.disabled = false); } } } }); cancelEditButton?.addEventListener('click', resetCategoryForm); categoryForm?.addEventListener('submit', async (event) => { event.preventDefault(); if (!supabase) return; const catName = categoryNameInput?.value.trim(); const catAttributes = categoryAttributesInput?.value.trim(); const editingId = categoryIdEditInput?.value; if (!catName) { showAdminFeedback("Nom catégorie obligatoire.", 'error'); categoryNameInput?.focus(); return; } const categoryData = { name: catName, attributes: catAttributes === '' ? null : catAttributes }; showAdminFeedback("Enregistrement...", "info"); const saveBtn = document.getElementById('save-category-button'); if(saveBtn) saveBtn.disabled = true; if(cancelEditButton) cancelEditButton.disabled = true; try { let response; if (editingId) { response = await supabase.from('categories').update(categoryData).eq('id', editingId).select().single(); } else { response = await supabase.from('categories').insert(categoryData).select().single(); } const { data, error } = response; if (error) { if (error.code === '23505') { showAdminFeedback(`Erreur: Nom cat "${catName}" existe déjà.`, 'error'); categoryNameInput?.focus(); } else { throw new Error(`DB Error: ${error.message}`); } } else { showAdminFeedback(`Cat "${data.name}" ${editingId ? 'modifiée' : 'ajoutée'}.`, 'success'); invalidateCategoriesCache(); await loadCategoriesAdmin(); resetCategoryForm(); await populateInventoryFilters(); } } catch (err) { console.error("Erreur enregistrement cat:", err); showAdminFeedback(`Erreur: ${err.message}`, 'error'); } finally { if(saveBtn) saveBtn.disabled = false; if(cancelEditButton) { cancelEditButton.disabled = false; if(!categoryIdEditInput?.value) cancelEditButton.style.display = 'none'; } } }); }
    function resetCategoryForm(){ if(categoryForm) categoryForm.reset(); if(categoryIdEditInput) categoryIdEditInput.value = ''; if(categoryFormTitle) categoryFormTitle.textContent = "Ajouter une Catégorie"; if(cancelEditButton) cancelEditButton.style.display = 'none'; if (adminFeedbackDiv) adminFeedbackDiv.style.display = 'none'; }
    function addComponentCategorySelectListener() { componentCategorySelectAdmin?.addEventListener('change', () => { if (!specificAttributesDiv) return; specificAttributesDiv.innerHTML = ''; specificAttributesDiv.style.display = 'none'; const selectedOption = componentCategorySelectAdmin.options[componentCategorySelectAdmin.selectedIndex]; if (!selectedOption || !selectedOption.value) return; const attributesString = selectedOption.dataset.attributes; const categoryName = selectedOption.textContent; if (attributesString && attributesString.trim() !== "") { specificAttributesDiv.style.display = 'block'; const attributes = attributesString.split(',').map(attr => attr.trim()).filter(attr => attr); if (attributes.length > 0) { const titleElement = document.createElement('h4'); titleElement.textContent = `Attributs Spécifiques (${categoryName})`; specificAttributesDiv.appendChild(titleElement); attributes.forEach(attr => { const formGroup = document.createElement('div'); formGroup.classList.add('form-group'); const inputId = `attr-${attr.toLowerCase().replace(/[^a-z0-9]/g, '-')}`; const label = document.createElement('label'); label.setAttribute('for', inputId); label.textContent = `${attr}:`; const input = document.createElement('input'); input.setAttribute('type', 'text'); input.setAttribute('id', inputId); input.setAttribute('name', `attributes[${attr}]`); input.setAttribute('placeholder', `Valeur pour ${attr}`); input.dataset.attributeName = attr; formGroup.appendChild(label); formGroup.appendChild(input); specificAttributesDiv.appendChild(formGroup); }); } } }); }
    function showAdminFeedback(message, type = 'info'){ if (adminFeedbackDiv) { adminFeedbackDiv.textContent = message; adminFeedbackDiv.className = `feedback-area ${type}`; adminFeedbackDiv.style.display = 'block'; } }
    function resetStockForm() { if (stockForm) stockForm.reset(); if (componentInfoDiv) componentInfoDiv.style.display = 'none'; if (specificAttributesDiv) { specificAttributesDiv.innerHTML = ''; specificAttributesDiv.style.display = 'none'; } if (componentRefAdminInput) componentRefAdminInput.disabled = false; if (componentInitialQuantityInput) componentInitialQuantityInput.value = 0; if (componentThresholdInput) componentThresholdInput.value = ''; if (adminFeedbackDiv) adminFeedbackDiv.style.display = 'none'; if (componentCategorySelectAdmin) componentCategorySelectAdmin.value = ""; console.log("Formulaire stock réinitialisé."); }
    function addStockEventListeners() {
        checkStockButton?.addEventListener('click', async () => { const ref = componentRefAdminInput?.value.trim().toUpperCase(); if (!ref) { showAdminFeedback("Entrez réf.", 'warning'); return; } if(adminFeedbackDiv) adminFeedbackDiv.style.display = 'none'; if(checkStockButton) checkStockButton.disabled = true; checkStockButton.textContent = "Vérif..."; if(componentRefAdminInput) componentRefAdminInput.disabled = true; try { const stockInfo = await getStockInfoFromSupabase(ref); if (stockInfo) { console.log("Stock info admin:", stockInfo); if(componentInfoDiv) componentInfoDiv.style.display = 'block'; if(currentQuantitySpan) currentQuantitySpan.textContent = stockInfo.quantity; if(quantityChangeInput) quantityChangeInput.value = 0; if(componentDescInput) componentDescInput.value = stockInfo.description || ""; if(componentMfgInput) componentMfgInput.value = stockInfo.manufacturer || ""; if(componentDatasheetInput) componentDatasheetInput.value = stockInfo.datasheet || ""; if(componentDrawerAdminInput) componentDrawerAdminInput.value = stockInfo.drawer || ""; if(componentInitialQuantityInput) componentInitialQuantityInput.value = stockInfo.quantity; if(componentThresholdInput) componentThresholdInput.value = stockInfo.critical_threshold ?? ''; if(componentCategorySelectAdmin) { componentCategorySelectAdmin.value = stockInfo.category_id || ""; componentCategorySelectAdmin.dispatchEvent(new Event('change')); } setTimeout(() => { if (stockInfo.attributes && typeof stockInfo.attributes === 'object' && specificAttributesDiv) { Object.entries(stockInfo.attributes).forEach(([key, value]) => { const inputField = specificAttributesDiv.querySelector(`input[data-attribute-name="${key}"]`); if (inputField) { inputField.value = value || ''; } else { console.warn(`Input attr '${key}' non trouvé.`); } }); } }, 50); showAdminFeedback(`Composant "${ref}" trouvé.`, 'success'); if (currentUser && stockInfo.drawer) { updateSevenSegmentDisplay(stockInfo.drawer); } } else { if(componentInfoDiv) componentInfoDiv.style.display = 'none'; resetStockForm(); if(componentRefAdminInput) componentRefAdminInput.value = ref; showAdminFeedback(`Composant "${ref}" inconnu. Remplissez pour ajouter.`, 'info'); componentDescInput?.focus(); updateSevenSegmentDisplay(null); } } catch (error) { console.error("Erreur checkStock:", error); showAdminFeedback(`Erreur vérif: ${error.message}`, 'error'); resetStockForm(); if(componentRefAdminInput) componentRefAdminInput.value = ref; } finally { if(checkStockButton) checkStockButton.disabled = false; checkStockButton.textContent = "Vérifier"; if(componentRefAdminInput) componentRefAdminInput.disabled = false; } });
        updateQuantityButton?.addEventListener('click', async () => { const ref = componentRefAdminInput?.value.trim().toUpperCase(); const changeStr = quantityChangeInput?.value; const change = parseInt(changeStr, 10); if (!ref) { showAdminFeedback("Réf manquante.", 'warning'); return; } if (changeStr === '' || isNaN(change)) { showAdminFeedback("Qté invalide.", 'warning'); quantityChangeInput?.focus(); return; } if (change === 0) { showAdminFeedback("Aucun changement.", 'info'); return; } const currentDisplayedQuantity = parseInt(currentQuantitySpan?.textContent, 10); if (!isNaN(currentDisplayedQuantity) && currentDisplayedQuantity + change < 0) { showAdminFeedback(`Stock négatif (${currentDisplayedQuantity + change}).`, 'error'); return; } if(updateQuantityButton) updateQuantityButton.disabled = true; updateQuantityButton.textContent = "MàJ..."; try { const newQuantity = await updateStockInSupabase(ref, change); if (newQuantity !== null) { if(currentQuantitySpan) currentQuantitySpan.textContent = newQuantity; if(componentInitialQuantityInput) componentInitialQuantityInput.value = newQuantity; if(quantityChangeInput) quantityChangeInput.value = 0; showAdminFeedback(`Stock "${ref}" MàJ: ${newQuantity}.`, 'success'); if (inventoryView.classList.contains('active-view')) { displayInventory(); } } } catch (error) { console.error("Erreur JS updateQty:", error); showAdminFeedback(error.message.includes("Stock insuffisant") ? "Stock insuffisant." : `Erreur MàJ: ${error.message}`, 'error'); } finally { if(updateQuantityButton) updateQuantityButton.disabled = false; updateQuantityButton.textContent = "Mettre à jour"; } });
        stockForm?.addEventListener('submit', async (event) => {
            event.preventDefault(); if (!supabase) return;
            const ref = componentRefAdminInput?.value.trim().toUpperCase();
            const categoryId = componentCategorySelectAdmin?.value || null; // camelCase
            const description = componentDescInput?.value.trim() || null;
            const manufacturer = componentMfgInput?.value.trim() || null;
            const datasheet = componentDatasheetInput?.value.trim() || null;
            const drawer = componentDrawerAdminInput?.value.trim().toUpperCase() || null;
            const quantityStr = componentInitialQuantityInput?.value;
            const thresholdStr = componentThresholdInput?.value.trim();
            if (!ref) { showAdminFeedback("Réf obligatoire.", 'error'); componentRefAdminInput?.focus(); return; }
            // *** Validation Catégorie (Utilise bien categoryId) ***
            if (!categoryId) { showAdminFeedback("Veuillez sélectionner une catégorie.", 'error'); componentCategorySelectAdmin?.focus(); return; }
            const quantity = parseInt(quantityStr, 10);
            if (quantityStr === '' || isNaN(quantity) || quantity < 0) { showAdminFeedback("Qté invalide (>= 0).", 'error'); componentInitialQuantityInput?.focus(); return; }
            let critical_threshold = null;
            if (thresholdStr !== '') { critical_threshold = parseInt(thresholdStr, 10); if (isNaN(critical_threshold) || critical_threshold < 0) { showAdminFeedback("Seuil invalide (>= 0).", 'error'); componentThresholdInput?.focus(); return; } }
            if (datasheet) { try { new URL(datasheet); } catch (_) { showAdminFeedback("URL Datasheet invalide.", 'error'); componentDatasheetInput?.focus(); return; } }
            const attributes = {}; specificAttributesDiv?.querySelectorAll('input[data-attribute-name]').forEach(input => { const attrName = input.dataset.attributeName; const attrValue = input.value.trim(); if (attrName && attrValue) { attributes[attrName] = attrValue; } });
            // *** Préparation Données (Assigne categoryId à category_id) ***
            const componentData = { ref, description, manufacturer, quantity, datasheet, drawer, category_id: categoryId, attributes: Object.keys(attributes).length > 0 ? attributes : null, critical_threshold };
            console.log("Prépa Upsert:", componentData); showAdminFeedback("Enregistrement...", "info"); if(saveComponentButton) saveComponentButton.disabled = true;
            try {
                const { data, error } = await supabase.from('inventory').upsert(componentData, { onConflict: 'ref' }).select().single();
                if (error) { throw new Error(`Erreur DB: ${error.message}`); }
                console.log("Upsert succès:", data); showAdminFeedback(`Composant "${ref}" enregistré/MàJ.`, 'success');
                if (componentInfoDiv?.style.display === 'block') { if(currentQuantitySpan) currentQuantitySpan.textContent = data.quantity; if(quantityChangeInput) quantityChangeInput.value = 0; }
                if (inventoryView.classList.contains('active-view')) { displayInventory(); }
                if (currentUser && data.drawer) { updateSevenSegmentDisplay(data.drawer); }
            } catch(err) { console.error("Erreur upsert composant:", err); showAdminFeedback(`Erreur enregistrement: ${err.message}`, 'error'); }
            finally { if(saveComponentButton) saveComponentButton.disabled = false; }
        });
    }

    // --- LOGIQUE VUE RECHERCHE (Chat) ---
    async function addMessageToChat(sender, messageContent, isHTML = false) { if (!responseOutputChat) return; const messageElement = document.createElement('div'); messageElement.classList.add('message', sender.toLowerCase()); responseOutputChat.prepend(messageElement); if (sender === 'AI') { loadingIndicatorChat.style.display = 'block'; loadingIndicatorChat.querySelector('i').textContent = 'StockAV réfléchit...'; messageElement.innerHTML = '...'; await delay(150); if (isHTML) { messageElement.innerHTML = messageContent; } else { messageElement.textContent = ''; for (let i = 0; i < messageContent.length; i++) { messageElement.textContent += messageContent[i]; await delay(5); } } loadingIndicatorChat.style.display = 'none'; } else { messageElement.textContent = messageContent; } const role = sender === 'User' ? 'user' : 'assistant'; chatHistory.push({ role: role, content: messageContent }); if (chatHistory.length > 10) { chatHistory.splice(0, chatHistory.length - 10); } responseOutputChat.scrollTop = 0; }
    function displayWelcomeMessage() { if (responseOutputChat) responseOutputChat.innerHTML = ''; chatHistory = []; resetConversationState(); addMessageToChat('AI', "Bonjour ! Je suis StockAV. Quelle référence cherchez-vous ?"); if(componentInputChat) { componentInputChat.value = ''; componentInputChat.focus(); } }
    async function handleUserInput() { const userInput = componentInputChat?.value.trim(); if (!userInput) return; addMessageToChat('User', userInput); if (componentInputChat) componentInputChat.value = ''; try { if (conversationState.awaitingQuantityConfirmation) { if (!currentUser) { await promptLoginBeforeAction("confirmer quantité"); return; } await handleQuantityResponse(userInput); } else { const potentialRef = extractReference(userInput); if (potentialRef) { console.log(`Nouvelle réf: ${potentialRef}. Appel checkComponentWithAI.`); resetConversationState(); conversationState.originalRefChecked = potentialRef; await checkComponentWithAI(potentialRef); } else { if (conversationState.awaitingEquivalentChoice) { await addMessageToChat('AI', "Entrée non reconnue. Cliquez 'Prendre' ou entrez nouvelle réf."); } else { await addMessageToChat('AI', "Non compris. Entrez réf composant ?"); resetConversationState(); } } } } catch (error) { console.error("Erreur majeure handleUserInput:", error); await addMessageToChat('AI', "Oups ! Erreur inattendue. Réessayez."); resetConversationState(); } finally { if(componentInputChat) componentInputChat.focus(); } }
    function extractReference(text) { const upperText = text.toUpperCase(); let bestMatch = null; const patterns = [ /\b(PIC\s?[A-Z\d\-F/L]+)\b/, /\b(AT[TINY|MEGA|XMEGA]+\s?\d+[A-Z\d\-]*)\b/, /\b(STM32[A-Z]\d{2,}[A-Z\d]*)\b/, /\b(ESP[ -]?\d{2,}[A-Z\d\-]*)\b/, /\b(IRF[A-Z\d]+)\b/, /\b(LM\s?\d{2,}[A-Z\d\-/]*)\b/, /\b(NE\s?\d{3}[A-Z]*)\b/, /\b(UA\s?\d{3,}[A-Z]*)\b/, /\b(MAX\s?\d{3,}[A-Z\d\-/]*)\b/, /\b(SN\s?74[A-Z\d]+)\b/, /\b(CD\s?4\d{3,}[A-Z]*)\b/, /\b([1-9]N\s?\d{4}[A-Z]*)\b/, /\b([2-9](?:N|P)\s?\d{4}[A-Z]*)\b/, /\b(BC\s?\d{3}[A-Z]*)\b/, /\b(BD\s?\d{3}[A-Z]*)\b/, /\b(TIP\s?\d{2,}[A-Z]*)\b/, /\b(MOC\s?\d{4}[A-Z]*)\b/, /\b(\d+(?:\.\d+)?\s?(PF|NF|UF|µF))\b/i, /\b(\d+(?:\.\d+)?[RK]?)\s?(R|K|M)?\s?O?H?M?S?\b/i, /\b([A-Z]{2,}\d{2,}[A-Z\d\-/]*)\b/, /\b(\d{2,}[A-Z]{1,}[A-Z\d\-/]*)\b/, /\b([A-Z]{1,}\d{3,}[A-Z\d\-/]*)\b/ ]; const ignoreWords = new Set([ 'POUR','AVEC','COMBIEN','STOCK','CHERCHE','DISPO','EQUIV','REMPLACE','TROUVE','QUEL','EST','QUE','SONT','LES','DU','UN','UNE','OU','ET','LE','LA','DE','À','PLUS','MOINS','PEUT','IL','ELLE','ON','JE','TU','COMME','DANS','SUR','VOLTS','AMPERES','WATTS','OHMS','FARADS','HENRYS','TYPE','VALEUR' ]); for (const pattern of patterns) { const match = upperText.match(pattern); if (match && match[1]) { const cleanedRef = match[1].replace(/\s+/g, '').replace(/OHMS?|FARADS?/, ''); if (cleanedRef.length >= 3 && !/^\d+$/.test(cleanedRef) && !ignoreWords.has(cleanedRef)) { if (!bestMatch || cleanedRef.length > bestMatch.length) { bestMatch = cleanedRef; } } } } if (!bestMatch) { const words = upperText.split(/[\s,;:!?()]+/); const potentialRefs = words.filter(w => w.length >= 3 && /\d/.test(w) && /[A-Z]/.test(w) && !/^\d+$/.test(w) && !ignoreWords.has(w) ); if (potentialRefs.length > 0) { potentialRefs.sort((a, b) => b.length - a.length); bestMatch = potentialRefs[0]; } } console.log(`Ref extracted: ${bestMatch}`); return bestMatch; }
    async function checkComponentWithAI(originalRef) { loadingIndicatorChat.style.display = 'block'; loadingIndicatorChat.querySelector('i').textContent = `Analyse locale ${originalRef}...`; let originalStockInfo = null; let equivalents = []; let aiError = null; let responseHTML = ""; try { originalStockInfo = await getStockInfoFromSupabase(originalRef); await delay(150); if (currentUser && originalStockInfo?.drawer) { updateSevenSegmentDisplay(originalStockInfo.drawer); } const showDrawer = currentUser && originalStockInfo?.drawer; let originalStatusHTML = ""; if (originalStockInfo) { const indicatorHTML = createStockIndicatorHTML(originalStockInfo.quantity, originalStockInfo.critical_threshold); originalStatusHTML = (originalStockInfo.quantity > 0) ? `${indicatorHTML}Original <strong>${originalRef}</strong> : Dispo (Qté: ${originalStockInfo.quantity}${showDrawer ? `, Tiroir: ${originalStockInfo.drawer}` : ''}).` : `${indicatorHTML}Original <strong>${originalRef}</strong> : Rupture local.`; if (originalStockInfo.quantity > 0) conversationState.criticalThreshold = originalStockInfo.critical_threshold; } else { originalStatusHTML = `${createStockIndicatorHTML(undefined, undefined)}Original <strong>${originalRef}</strong> : Non trouvé local.`; } responseHTML += originalStatusHTML; loadingIndicatorChat.querySelector('i').textContent = `Recherche équivalents IA ${originalRef}...`; const aiResult = await getAIEquivalents(originalRef); if (aiResult.error) { aiError = aiResult.error; console.error("Erreur getAIEquivalents:", aiError); } else { equivalents = aiResult.equivalents || []; } let equivalentsStockInfo = {}; if (equivalents.length > 0) { loadingIndicatorChat.querySelector('i').textContent = `Vérif stock local équivalents...`; const equivalentRefs = equivalents.map(eq => eq.ref); const stockCheckPromises = equivalentRefs.map(ref => getStockInfoFromSupabase(ref)); const results = await Promise.all(stockCheckPromises); results.forEach((stockInfo, index) => { if (stockInfo) { equivalentsStockInfo[equivalentRefs[index]] = stockInfo; } }); console.log("Stock info équivalents:", equivalentsStockInfo); } if (equivalents.length > 0) { responseHTML += "<br><br><strong>Équivalents suggérés IA :</strong>"; let foundAvailableEquivalent = false; equivalents.forEach(eq => { const eqStock = equivalentsStockInfo[eq.ref]; const eqIndicatorHTML = createStockIndicatorHTML(eqStock?.quantity, eqStock?.critical_threshold); const eqShowDrawer = currentUser && eqStock?.drawer; responseHTML += `<div class="equivalent-item">`; responseHTML += `${eqIndicatorHTML}<strong>${eq.ref}</strong> <small>(${eq.reason || 'Suggestion AI'})</small>`; if (eqStock) { if (eqStock.quantity > 0) { foundAvailableEquivalent = true; responseHTML += ` : Dispo (Qté: ${eqStock.quantity}${eqShowDrawer ? `, Tiroir: ${eqStock.drawer}` : ''})`; if (currentUser) { responseHTML += ` <button class="choice-button take-button" data-ref="${eq.ref}" data-qty="${eqStock.quantity}" data-threshold="${eqStock.critical_threshold ?? ''}">Prendre</button>`; } } else { responseHTML += ` : Rupture local.`; responseHTML += provideExternalLinksHTML(eq.ref, true); } } else { responseHTML += ` : Non trouvé local.`; responseHTML += provideExternalLinksHTML(eq.ref, true); } responseHTML += `</div>`; }); if (foundAvailableEquivalent || (originalStockInfo && originalStockInfo.quantity > 0)) { conversationState.awaitingEquivalentChoice = true; } } else if (!aiError) { responseHTML += "<br><br>IA n'a pas trouvé d'équivalents."; } if (originalStockInfo && originalStockInfo.quantity > 0 && currentUser) { responseHTML += `<br><button class="choice-button take-button" data-ref="${originalRef}" data-qty="${originalStockInfo.quantity}" data-threshold="${originalStockInfo.critical_threshold ?? ''}">Prendre original (${originalRef})</button>`; conversationState.awaitingEquivalentChoice = true; } else if (originalStockInfo && originalStockInfo.quantity > 0 && !currentUser) { responseHTML += `<br><br><i>Original dispo. Connectez-vous pour prendre.</i>`; } if (!originalStockInfo || originalStockInfo.quantity <= 0) { responseHTML += provideExternalLinksHTML(originalRef, false); } if (aiError) { responseHTML += `<br><br><i style="color: var(--error-color);">Erreur IA équivalents: ${aiError}.</i>`; if (!responseHTML.includes('external-links-block') && (!originalStockInfo || originalStockInfo.quantity <= 0)) { responseHTML += provideExternalLinksHTML(originalRef, false); } } if (!conversationState.awaitingEquivalentChoice && !conversationState.awaitingQuantityConfirmation) { responseHTML += "<br><br>Autre chose ?"; resetConversationState(); } else if (!currentUser && conversationState.awaitingEquivalentChoice) { responseHTML += `<br><br><i>Connectez-vous pour choisir/prendre.</i>`; } } catch (error) { console.error(`Erreur majeure checkComponentWithAI pour ${originalRef}:`, error); responseHTML = `Erreur recherche <strong>${originalRef}</strong>.<br>Détails: ${error.message}`; resetConversationState(); } finally { loadingIndicatorChat.style.display = 'none'; await addMessageToChat('AI', responseHTML, true); } }
    async function getAIEquivalents(reference) { if (!supabase) { return { equivalents: null, error: "Client Supabase non init." }; } console.log(`Appel func Edge 'openai-equivalents' pour: ${reference}`); try { const { data, error: invokeError } = await supabase.functions.invoke('openai-equivalents', { body: { reference: reference } }); if (invokeError) { let message = invokeError.message || "Erreur inconnue func Edge"; if (invokeError.context?.status === 404 || message.includes("Function not found")) { message = "Service IA non trouvé."; } else if (invokeError.context?.status === 500) { message = "Erreur interne service IA."; } else if (message.includes("fetch failed")) { message = "Impossible contacter service IA."; } throw new Error(message); } if (data && data.error) { console.error("Erreur retournée par func Edge:", data.error); return { equivalents: null, error: data.error }; } if (data && Array.isArray(data.equivalents)) { console.log("Équivalents reçus:", data.equivalents); return { equivalents: data.equivalents, error: null }; } else { console.warn("Structure data inattendue func Edge:", data); return { equivalents: [], error: "Réponse inattendue service IA." }; } } catch (error) { console.error("Erreur générale getAIEquivalents:", error); return { equivalents: null, error: error.message || "Échec comm service IA." }; } }
    responseOutputChat?.addEventListener('click', async (event) => { const targetButton = event.target.closest('button.choice-button.take-button'); if (targetButton && conversationState.awaitingEquivalentChoice) { const chosenRef = targetButton.dataset.ref; const availableQtyStr = targetButton.dataset.qty; const criticalThresholdStr = targetButton.dataset.threshold; if (!chosenRef || availableQtyStr === undefined) { return; } const availableQty = parseInt(availableQtyStr, 10); if (isNaN(availableQty) || availableQty <= 0) { return; } if (!currentUser) { await promptLoginBeforeAction(`prendre ${chosenRef}`); return; } console.log(`Choix: ${chosenRef}, Qté: ${availableQty}`); conversationState.awaitingEquivalentChoice = false; addMessageToChat('User', `Je prends ${chosenRef}`); await delay(50); conversationState.chosenRefForStockCheck = chosenRef; conversationState.availableQuantity = availableQty; conversationState.criticalThreshold = (criticalThresholdStr && !isNaN(parseInt(criticalThresholdStr, 10))) ? parseInt(criticalThresholdStr, 10) : null; conversationState.awaitingQuantityConfirmation = true; const stockInfo = await getStockInfoFromSupabase(chosenRef); if (currentUser && stockInfo?.drawer) { updateSevenSegmentDisplay(stockInfo.drawer); } await addMessageToChat('AI', `Combien de <strong>${chosenRef}</strong> ? (Stock : ${availableQty}) Entrez nombre ou '0'.`); } else if (event.target.tagName === 'A' && (event.target.classList.contains('external-link') || event.target.classList.contains('external-link-inline'))) { console.log(`Lien externe: ${event.target.href}`); } });
    async function promptLoginBeforeAction(actionDescription) { await addMessageToChat('AI', `Pour ${actionDescription}, veuillez vous connecter (zone en haut).`); loginCodeInput?.focus(); }
    function provideExternalLinksHTML(ref, inline = false) { if (!ref) return ''; const encodedRef = encodeURIComponent(ref); const mLink = `https://www.mouser.ca/Search/Refine?Keyword=${encodedRef}`; const dLink = `https://www.digikey.ca/en/products/result?keywords=${encodedRef}`; const aLink = `https://www.aliexpress.com/wholesale?SearchText=${encodedRef}`; if (inline) { return ` <span class="external-links-inline">(Voir : <a href="${mLink}" target="_blank" rel="noopener noreferrer" class="external-link-inline" title="Rechercher ${ref} sur Mouser">Mouser</a>, <a href="${dLink}" target="_blank" rel="noopener noreferrer" class="external-link-inline" title="Rechercher ${ref} sur Digi-Key">Digi-Key</a>, <a href="${aLink}" target="_blank" rel="noopener noreferrer" class="external-link-inline aliexpress" title="Rechercher ${ref} sur AliExpress">AliExpress</a>)</span>`; } else { return `<div class="external-links-block">Liens recherche externe <strong>${ref}</strong> : <a href="${mLink}" target="_blank" rel="noopener noreferrer" class="external-link">Mouser</a> <a href="${dLink}" target="_blank" rel="noopener noreferrer" class="external-link">Digi-Key</a> <a href="${aLink}" target="_blank" rel="noopener noreferrer" class="external-link aliexpress">AliExpress</a></div>`; } }
    async function handleQuantityResponse(userInput) { const ref = conversationState.chosenRefForStockCheck; if (!ref || !conversationState.awaitingQuantityConfirmation) { const potentialRef = extractReference(userInput); if (potentialRef) { resetConversationState(); conversationState.originalRefChecked = potentialRef; await checkComponentWithAI(potentialRef); } else { await addMessageToChat("AI", "Non compris. Entrez réf ou cliquez 'Prendre'."); conversationState.awaitingQuantityConfirmation = false; } return; } const requestedQty = parseInt(userInput, 10); if (isNaN(requestedQty) || requestedQty < 0) { await addMessageToChat('AI', `Qté invalide. Entrez nombre >= 0.`); return; } if (requestedQty === 0) { await addMessageToChat('AI', "Prise stock annulée."); resetConversationState(); await delay(300); await addMessageToChat('AI', "Besoin d'autre chose ?"); return; } if (requestedQty > conversationState.availableQuantity) { await addMessageToChat('AI', `Qté (${requestedQty}) > stock (${conversationState.availableQuantity}). Entrez qté valide ou '0'.`); return; } loadingIndicatorChat.style.display = 'block'; loadingIndicatorChat.querySelector('i').textContent = `MàJ stock ${ref}...`; const change = -requestedQty; try { const newQty = await updateStockInSupabase(ref, change); loadingIndicatorChat.style.display = 'none'; if (newQty !== null) { const statusIndicatorHTML = createStockIndicatorHTML(newQty, conversationState.criticalThreshold); await addMessageToChat('AI', `${statusIndicatorHTML}Ok ! ${requestedQty} x <strong>${ref}</strong> retiré(s). Stock : ${newQty}.`); if (inventoryView.classList.contains('active-view')) { displayInventory(currentInventoryPage); } conversationState.awaitingQuantityConfirmation = false; } } catch (error) { console.error("Erreur màj stock via chat:", error); loadingIndicatorChat.style.display = 'none'; let errorMessage = `Erreur màj stock <strong>${ref}</strong>.`; if (error.message.includes("Stock insuffisant")) { errorMessage = `Erreur critique : Stock <strong>${ref}</strong> insuffisant (${error.message}).`; const currentStock = await getStockInfoFromSupabase(ref); if(currentStock) { errorMessage += ` Stock actuel réel: ${currentStock.quantity}. Réessayez qté valide ou '0'.`; conversationState.availableQuantity = currentStock.quantity; conversationState.awaitingQuantityConfirmation = true; await addMessageToChat('AI', errorMessage); return; } } else if (error.message) { errorMessage += ` Détails: ${error.message}`; } conversationState.awaitingQuantityConfirmation = false; await addMessageToChat('AI', errorMessage); resetConversationState(); } finally { if (!conversationState.awaitingQuantityConfirmation) { resetConversationState(); await delay(300); await addMessageToChat('AI', "Besoin d'autre chose ?"); } } }
    function resetConversationState() { conversationState = { awaitingEquivalentChoice: false, awaitingQuantityConfirmation: false, originalRefChecked: null, potentialEquivalents: [], chosenRefForStockCheck: null, availableQuantity: 0, criticalThreshold: null }; console.log("État conv chat réinitialisé."); }

    // --- Fonctions d'interaction Supabase ---
    async function getStockInfoFromSupabase(ref) { if (!supabase || !ref) return null; const upperRef = ref.toUpperCase(); try { const { data, error } = await supabase.from('inventory').select('*, categories(name), critical_threshold').ilike('ref', upperRef).single(); if (error) { if (error.code !== 'PGRST116') { console.error(`Supabase GET Error for ${upperRef}:`, error); } return null; } return data; } catch (err) { console.error("JS Error in getStockInfoFromSupabase:", err); return null; } }
    async function updateStockInSupabase(ref, change) { if (!supabase || !ref || change === 0 || !currentUser) { throw new Error("Màj annulée: infos manquantes ou non connecté."); } const upperRef = ref.toUpperCase(); console.log(`Supabase UPDATE: Ref: ${upperRef}, Change: ${change}`); try { const { data: currentItem, error: readError } = await supabase.from('inventory').select('quantity, drawer, critical_threshold').ilike('ref', upperRef).single(); if (readError || !currentItem) { throw new Error(`Composant "${upperRef}" non trouvé.`); } const newQuantity = currentItem.quantity + change; if (newQuantity < 0) { throw new Error(`Stock insuffisant pour ${upperRef}.`); } const { data: updateData, error: updateError } = await supabase.from('inventory').update({ quantity: newQuantity }).ilike('ref', upperRef).select('quantity, drawer').single(); if (updateError) { throw new Error("Erreur enregistrement màj stock."); } console.log(`Supabase UPDATE Success: ${upperRef}. New Qty: ${updateData.quantity}`); await addLogEntry(upperRef, change, newQuantity); if (currentUser && updateData.drawer) { updateSevenSegmentDisplay(updateData.drawer); } return newQuantity; } catch (err) { console.error(`Error in updateStockInSupabase for ${upperRef}:`, err.message); throw err; } }

    // --- Gestion Modale Quantité (+/-) ---
    async function handleInventoryRowClick(event) { const row = event.target.closest('tr.inventory-item-row'); if (!row) return; if (!currentUser) { if(loginError) { loginError.textContent = "Connexion requise."; loginError.style.color = 'var(--error-color)'; loginError.style.display = 'block'; } loginCodeInput?.focus(); return; } const ref = row.dataset.ref; if (!ref) { console.error("Ref manquante sur ligne:", row); return; } console.log(`Clic inventaire réf: ${ref}`); row.style.opacity = '0.7'; try { const item = await getStockInfoFromSupabase(ref); row.style.opacity = '1'; if (item) { if (currentUser && item.drawer) { updateSevenSegmentDisplay(item.drawer); } showQuantityModal(item.ref, item.quantity); } else { console.error(`Détails ${ref} non trouvés.`); alert(`Erreur: Détails ${ref} non trouvés.`); displayInventory(currentInventoryPage); } } catch (error) { row.style.opacity = '1'; console.error("Erreur JS handleInventoryRowClick:", error); alert("Erreur récup détails."); } }
    function showQuantityModal(ref, quantity) { if (!quantityChangeModal || !modalOverlay) return; modalCurrentRef = ref; modalInitialQuantity = quantity; currentModalChange = 0; if(modalRefSpan) modalRefSpan.textContent = ref; if(modalQtySpan) modalQtySpan.textContent = quantity; if(modalChangeAmountDisplay) modalChangeAmountDisplay.textContent = currentModalChange; if(modalFeedback) {modalFeedback.textContent = ''; modalFeedback.style.display = 'none'; modalFeedback.className = 'modal-feedback';} updateModalButtonStates(); quantityChangeModal.classList.add('active'); modalOverlay.classList.add('active'); }
    function hideQuantityModal() { if (!quantityChangeModal || !modalOverlay) return; quantityChangeModal.classList.remove('active'); modalOverlay.classList.remove('active'); modalCurrentRef = null; modalInitialQuantity = 0; currentModalChange = 0; }
    function updateModalButtonStates() { if (!modalDecreaseButton || !modalIncreaseButton || !modalConfirmButton || !modalChangeAmountDisplay) return; const resultingQuantity = modalInitialQuantity + currentModalChange; if(modalChangeAmountDisplay) modalChangeAmountDisplay.textContent = currentModalChange > 0 ? `+${currentModalChange}` : currentModalChange; if(modalDecreaseButton) modalDecreaseButton.disabled = (resultingQuantity <= 0); if(modalIncreaseButton) modalIncreaseButton.disabled = false; if(modalConfirmButton) modalConfirmButton.disabled = (currentModalChange === 0); }
    modalDecreaseButton?.addEventListener('click', () => { if (modalInitialQuantity + currentModalChange > 0) { currentModalChange--; updateModalButtonStates(); } });
    modalIncreaseButton?.addEventListener('click', () => { currentModalChange++; updateModalButtonStates(); });
    modalCancelButton?.addEventListener('click', hideQuantityModal);
    modalOverlay?.addEventListener('click', (event) => { if (event.target === modalOverlay) hideQuantityModal(); });
    modalConfirmButton?.addEventListener('click', async () => { if(modalFeedback) modalFeedback.style.display = 'none'; if (currentModalChange === 0 || !modalCurrentRef) return; if (modalInitialQuantity + currentModalChange < 0) { if(modalFeedback) { modalFeedback.textContent = "Stock négatif."; modalFeedback.className = 'modal-feedback error'; modalFeedback.style.display = 'block'; } return; } if(modalConfirmButton) modalConfirmButton.disabled = true; if(modalCancelButton) modalCancelButton.disabled = true; if(modalDecreaseButton) modalDecreaseButton.disabled = true; if(modalIncreaseButton) modalIncreaseButton.disabled = true; if(modalFeedback) { modalFeedback.textContent = "MàJ..."; modalFeedback.className = 'modal-feedback info'; modalFeedback.style.display = 'block'; } try { const newQuantity = await updateStockInSupabase(modalCurrentRef, currentModalChange); if (newQuantity !== null) { hideQuantityModal(); displayInventory(currentInventoryPage); } } catch (error) { console.error("Erreur confirm modal:", error); if(modalFeedback) { modalFeedback.textContent = error.message.includes("Stock insuffisant") ? "Stock insuffisant." : `Erreur: ${error.message}`; modalFeedback.className = 'modal-feedback error'; modalFeedback.style.display = 'block';} if (quantityChangeModal?.classList.contains('active')) { if(modalCancelButton) modalCancelButton.disabled = false; updateModalButtonStates(); if(modalConfirmButton) modalConfirmButton.disabled = (currentModalChange === 0); /* Correction: Réactiver boutons correctement */ if(modalDecreaseButton) modalDecreaseButton.disabled = (modalInitialQuantity + currentModalChange <= 0); if(modalIncreaseButton) modalIncreaseButton.disabled = false; } } });

    // --- Gestion Afficheur 7 Segments ---
    const segmentMap = { '0':['a','b','c','d','e','f'],'1':['b','c'],'2':['a','b','g','e','d'],'3':['a','b','g','c','d'],'4':['f','g','b','c'],'5':['a','f','g','c','d'],'6':['a','f','e','d','c','g'],'7':['a','b','c'],'8':['a','b','c','d','e','f','g'],'9':['a','b','c','d','f','g'],'A':['a','b','c','e','f','g'],'B':['c','d','e','f','g'],'b':['f','e','d','c','g'],'C':['a','f','e','d'],'c':['g','e','d'],'D':['b','c','d','e','g'],'d':['b','c','d','e','g'],'E':['a','f','e','d','g'],'F':['a','f','e','g'],'G':['a','f','e','d','c'],'H':['f','e','b','c','g'],'h':['f','e','c','g'],'I':['f','e'],'J':['b','c','d','e'],'L':['f','e','d'],'O':['a','b','c','d','e','f'],'o':['c','d','e','g'],'P':['a','b','f','e','g'],'r':['e','g'],'S':['a','f','g','c','d'],'U':['b','c','d','e','f'],'u':['c','d','e'],'-':['g'],' ':[],'_':['d'] };
    function updateSevenSegmentDisplay(newDrawerValue = undefined) { if (newDrawerValue === null) { lastDisplayedDrawer = null; } else if (newDrawerValue !== undefined) { const trimmedVal = String(newDrawerValue).trim().toUpperCase(); if (trimmedVal !== "") { lastDisplayedDrawer = trimmedVal; } } const drawerToDisplay = lastDisplayedDrawer; if (!sevenSegmentDisplay || !segmentDigits.every(d => d)) return; if (!currentUser || !drawerToDisplay) { sevenSegmentDisplay.classList.add('display-off'); segmentDigits.forEach(digitElement => { digitElement?.querySelectorAll('.segment').forEach(seg => seg.classList.remove('on')); digitElement?.classList.add('off'); }); return; } sevenSegmentDisplay.classList.remove('display-off'); const displayChars = drawerToDisplay.slice(-4).padStart(4, ' '); segmentDigits.forEach((digitElement, index) => { if (!digitElement) return; const charToDisplay = displayChars[index] || ' '; const segmentsOn = segmentMap[charToDisplay] || segmentMap['-']; digitElement.querySelectorAll('.segment').forEach(seg => seg.classList.remove('on')); segmentsOn.forEach(segId => { const segment = digitElement.querySelector(`.segment-${segId}`); segment?.classList.add('on'); }); digitElement.classList.remove('off'); }); }

    // --- Logique pour la vue Paramètres ---
    function loadSettingsData() { if (!currentUser || currentUserCode !== 'zine') return; showSettingsFeedback('export', '', 'none'); showSettingsFeedback('import', '', 'none'); if (importCsvFileInput) importCsvFileInput.value = ''; console.log("Vue Paramètres chargée pour zine."); if (categoriesCache.length === 0) { getCategories(); } }
    function showSettingsFeedback(type, message, level = 'info') { const feedbackDiv = (type === 'export') ? exportFeedbackDiv : importFeedbackDiv; if (feedbackDiv) { feedbackDiv.textContent = message; feedbackDiv.className = `feedback-area ${level}`; feedbackDiv.style.whiteSpace = (level === 'error' && type === 'import') ? 'pre-wrap' : 'normal'; feedbackDiv.style.textAlign = (level === 'error' && type === 'import') ? 'left' : 'center'; feedbackDiv.style.display = (level === 'none' || !message) ? 'none' : 'block'; } }
    function downloadFile(filename, content, mimeType) { const blob = new Blob([content], { type: mimeType }); const url = URL.createObjectURL(blob); const a = document.createElement('a'); a.href = url; a.download = filename; document.body.appendChild(a); a.click(); document.body.removeChild(a); URL.revokeObjectURL(url); }
    async function handleExportInventoryCSV() { if (!supabase) return; showSettingsFeedback('export', "Récup inventaire...", 'info'); if(exportInventoryCsvButton) exportInventoryCsvButton.disabled = true; try { const { data, error } = await supabase.from('inventory').select('*, categories(name)').order('ref', { ascending: true }); if (error) throw new Error(`DB: ${error.message}`); if (!data || data.length === 0) { showSettingsFeedback('export', "Inventaire vide.", 'warning'); return; } const csvData = data.map(item => ({ ref: item.ref, description: item.description || '', manufacturer: item.manufacturer || '', quantity: item.quantity, datasheet: item.datasheet || '', drawer: item.drawer || '', category_name: item.categories?.name || '', critical_threshold: item.critical_threshold ?? '', attributes: item.attributes ? JSON.stringify(item.attributes) : '' })); const csvString = Papa.unparse(csvData, { header: true, quotes: true, delimiter: "," }); const timestamp = new Date().toISOString().slice(0, 16).replace(/[:T]/g, '-'); downloadFile(`stockav_inventory_${timestamp}.csv`, csvString, 'text/csv;charset=utf-8;'); showSettingsFeedback('export', `Export CSV OK (${data.length} lignes).`, 'success'); } catch (err) { console.error("Erreur export CSV:", err); showSettingsFeedback('export', `Erreur: ${err.message}`, 'error'); } finally { if(exportInventoryCsvButton) exportInventoryCsvButton.disabled = false; } }
    async function handleExportLogTXT() { if (!supabase) return; showSettingsFeedback('export', "Récup historique...", 'info'); if(exportLogTxtButton) exportLogTxtButton.disabled = true; try { const { data, error } = await supabase.from('logs').select('*').order('created_at', { ascending: true }); if (error) throw new Error(`DB: ${error.message}`); if (!data || data.length === 0) { showSettingsFeedback('export', "Historique vide.", 'warning'); return; } let txtContent = "Historique StockAV\n===================\n\n"; txtContent += "Date & Heure          | Technicien | Action  | Référence        | +/-   | Stock Final\n"; txtContent += "----------------------+------------+---------+------------------+-------+------------\n"; data.forEach(log => { const timestamp = formatLogTimestamp(new Date(log.created_at)).padEnd(21); const user = (log.user_code || 'N/A').padEnd(10); const action = (log.quantity_change > 0 ? 'Ajout' : 'Retrait').padEnd(7); const ref = log.component_ref.padEnd(16); const change = (log.quantity_change > 0 ? `+${log.quantity_change}` : `${log.quantity_change}`).padStart(5); const after = String(log.quantity_after).padStart(11); txtContent += `${timestamp} | ${user} | ${action} | ${ref} | ${change} | ${after}\n`; }); const timestampFile = new Date().toISOString().slice(0, 16).replace(/[:T]/g, '-'); downloadFile(`stockav_logs_${timestampFile}.txt`, txtContent, 'text/plain;charset=utf-8;'); showSettingsFeedback('export', `Export TXT OK (${data.length} lignes).`, 'success'); } catch (err) { console.error("Erreur export TXT:", err); showSettingsFeedback('export', `Erreur: ${err.message}`, 'error'); } finally { if(exportLogTxtButton) exportLogTxtButton.disabled = false; } }
    async function handleImportInventoryCSV() { if (!supabase || typeof Papa === 'undefined') { showSettingsFeedback('import', "Erreur: Init.", 'error'); return; } if (!importCsvFileInput?.files?.length) { showSettingsFeedback('import', "Choisir fichier CSV.", 'warning'); return; } const file = importCsvFileInput.files[0]; showSettingsFeedback('import', `Lecture ${file.name}...`, 'info'); if(importInventoryCsvButton) importInventoryCsvButton.disabled = true; if(importCsvFileInput) importCsvFileInput.disabled = true; Papa.parse(file, { header: true, skipEmptyLines: true, dynamicTyping: false, complete: async (results) => { console.log("CSV Parsed:", results); const rows = results.data; const errors = results.errors; const requiredHeaders = ['ref', 'quantity']; if (errors.length > 0) { showSettingsFeedback('import', `Erreur lecture CSV L${errors[0].row + 1}: ${errors[0].message}.`, 'error'); resetImportState(); return; } if (rows.length === 0) { showSettingsFeedback('import', "CSV vide.", 'warning'); resetImportState(); return; } const headers = results.meta.fields; if (!headers || !requiredHeaders.every(h => headers.includes(h))) { showSettingsFeedback('import', `Erreur: En-têtes manquants (${requiredHeaders.join(", ")}).`, 'error'); resetImportState(); return; } showSettingsFeedback('import', `Validation (${rows.length} lignes)...`, 'info'); await delay(100); const itemsToUpsert = []; const validationErrors = []; const categoryMap = new Map(categoriesCache.map(cat => [cat.name.toUpperCase(), cat.id])); for (let i = 0; i < rows.length; i++) { const row = rows[i]; const lineNumber = i + 2; const ref = row.ref?.trim().toUpperCase(); if (!ref) { validationErrors.push(`L${lineNumber}: Réf manquante.`); continue; } const quantityStr = row.quantity?.trim(); const quantity = parseInt(quantityStr, 10); if (quantityStr === '' || isNaN(quantity) || quantity < 0) { validationErrors.push(`L${lineNumber}(Réf: ${ref}): Qté invalide ('${row.quantity || ''}').`); continue; } const description = row.description?.trim() || null; const manufacturer = row.manufacturer?.trim() || null; const datasheet = row.datasheet?.trim() || null; if (datasheet) { try { new URL(datasheet); } catch (_) { validationErrors.push(`L${lineNumber}(Réf: ${ref}): URL Datasheet invalide.`); continue;} } const drawer = row.drawer?.trim().toUpperCase() || null; const thresholdStr = row.critical_threshold?.trim(); let critical_threshold = null; if (thresholdStr && thresholdStr !== '') { critical_threshold = parseInt(thresholdStr, 10); if (isNaN(critical_threshold) || critical_threshold < 0) { validationErrors.push(`L${lineNumber}(Réf: ${ref}): Seuil invalide ('${row.critical_threshold}').`); continue; } } let category_id = null; const categoryName = row.category_name?.trim(); if (categoryName) { const foundId = categoryMap.get(categoryName.toUpperCase()); if (foundId) { category_id = foundId; } else { validationErrors.push(`L${lineNumber}(Réf: ${ref}): Catégorie '${categoryName}' non trouvée.`); continue; } } let attributes = null; const attributesStr = row.attributes?.trim(); if (attributesStr && attributesStr !== '{}') { try { attributes = JSON.parse(attributesStr); if (typeof attributes !== 'object' || attributes === null || Array.isArray(attributes)) { throw new Error("Objet JSON invalide."); } } catch (e) { validationErrors.push(`L${lineNumber}(Réf: ${ref}): Attributs JSON invalides. ${e.message}`); continue; } } itemsToUpsert.push({ ref, description, manufacturer, quantity, datasheet, drawer, category_id, critical_threshold, attributes }); } if (validationErrors.length > 0) { const errorMsg = `Erreurs validation:\n- ${validationErrors.slice(0, 15).join('\n- ')}${validationErrors.length > 15 ? '\n- ...' : ''}`; showSettingsFeedback('import', errorMsg, 'error'); resetImportState(); return; } if (itemsToUpsert.length > 0) { showSettingsFeedback('import', `Validation OK. Upsert ${itemsToUpsert.length} composants...`, 'info'); try { const { data: upsertData, error: upsertError } = await supabase.from('inventory').upsert(itemsToUpsert, { onConflict: 'ref' }).select('ref'); if (upsertError) { throw new Error(`DB Upsert: ${upsertError.message}`); } showSettingsFeedback('import', `Import OK (${upsertData?.length || 0} ajoutés/MàJ).`, 'success'); if (inventoryView?.classList.contains('active-view')) { displayInventory(1); } } catch (err) { console.error("Erreur upsert CSV:", err); showSettingsFeedback('import', `Erreur écriture DB: ${err.message}`, 'error'); } finally { resetImportState(); } } else { showSettingsFeedback('import', "Aucune ligne valide à importer.", 'warning'); resetImportState(); } }, error: (error) => { console.error("Erreur parsing PapaParse:", error); showSettingsFeedback('import', `Erreur lecture fichier: ${error.message}`, 'error'); resetImportState(); } }); }
    function resetImportState() { if(importInventoryCsvButton) importInventoryCsvButton.disabled = false; if (importCsvFileInput) { importCsvFileInput.disabled = false; importCsvFileInput.value = ''; } }
    function addSettingsEventListeners() { exportInventoryCsvButton?.addEventListener('click', handleExportInventoryCSV); exportLogTxtButton?.addEventListener('click', handleExportLogTXT); importInventoryCsvButton?.addEventListener('click', handleImportInventoryCSV); }

    // --- Initialisation Générale de l'Application ---
    function initializeApp() {
        console.log("Initialisation de StockAV...");
        const requiredIds = ['login-area','search-view','inventory-view','log-view','admin-view','settings-view','seven-segment-display','inventory-table-body','response-output','component-input','show-search-view','show-inventory-view','show-log-view','show-admin-view','show-settings-view','login-button','logout-button','search-button','category-list','stock-form','component-category-select','save-component-button','export-inventory-csv-button','import-inventory-csv-button','log-table-body'];
        if (requiredIds.some(id => !document.getElementById(id))) { console.error("FATAL: Elément DOM essentiel manquant! Vérifiez index.html."); document.body.innerHTML = "<p style='color:red; padding:20px;'><b>Erreur init.</b> Vérifiez console (F12) & index.html.</p>"; return; }

        // Listeners Navigation & Auth
        searchTabButton.addEventListener('click', () => setActiveView(searchView, searchTabButton));
        inventoryTabButton.addEventListener('click', () => setActiveView(inventoryView, inventoryTabButton));
        logTabButton.addEventListener('click', () => setActiveView(logView, logTabButton));
        adminTabButton.addEventListener('click', () => setActiveView(adminView, adminTabButton));
        settingsTabButton.addEventListener('click', () => setActiveView(settingsView, settingsTabButton));
        loginButton.addEventListener('click', handleLogin);
        loginPasswordInput?.addEventListener('keypress', (e) => { if (e.key === 'Enter') handleLogin(); });
        loginCodeInput?.addEventListener('keypress', (e) => { if (e.key === 'Enter') handleLogin(); });
        logoutButton.addEventListener('click', handleLogout);
        // Listeners Chat
        searchButtonChat.addEventListener('click', handleUserInput);
        componentInputChat.addEventListener('keypress', (event) => { if (event.key === 'Enter' && !event.shiftKey) { event.preventDefault(); handleUserInput(); } });
        // Listeners Inventaire
        applyInventoryFilterButton?.addEventListener('click', () => { currentInventoryFilters.category = inventoryCategoryFilter.value; currentInventoryFilters.search = inventorySearchFilter.value; displayInventory(1); });
        inventorySearchFilter?.addEventListener('keypress', (e) => { if (e.key === 'Enter') { applyInventoryFilterButton?.click(); } });
        inventoryPrevPageButton?.addEventListener('click', () => { if (currentInventoryPage > 1) { displayInventory(currentInventoryPage - 1); } });
        inventoryNextPageButton?.addEventListener('click', () => { if (!inventoryNextPageButton?.disabled) { displayInventory(currentInventoryPage + 1); } });
        inventoryTableBody.addEventListener('click', handleInventoryRowClick);
        // Listeners Log
        logPrevPageButton?.addEventListener('click', () => { if (currentLogPage > 1) { displayLog(currentLogPage - 1); } });
        logNextPageButton?.addEventListener('click', () => { if (!logNextPageButton?.disabled) { displayLog(currentLogPage + 1); } });
        logTableBody?.addEventListener('click', handleDeleteSingleLog);
        // Listeners Admin & Settings
        addCategoryEventListeners();
        addComponentCategorySelectListener();
        addStockEventListeners();
        addSettingsEventListeners();

        // Initialisation finale
        setupAuthListener();
        updateSevenSegmentDisplay(null);
        console.log("StockAV initialisé et prêt.");
    } // Fin initializeApp

    // --- Lancer l'application ---
    initializeApp();

}); // ----- FIN DU FICHIER script.js -----
```

---

### 11.4 `supabase/functions/_shared/cors.ts`

```typescript
// supabase/functions/_shared/cors.ts

export const corsHeaders = {
  // ATTENTION: '*' est permissif. Pour la production, remplacez par l'URL
  // exacte de votre application déployée (ex: 'https://zine76.github.io')
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'POST, OPTIONS', // Uniquement POST et OPTIONS nécessaires ici
};
```

---

### 11.5 `supabase/functions/openai-equivalents/index.ts`

```typescript
// supabase/functions/openai-equivalents/index.ts
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
// Importe les en-têtes CORS depuis le fichier partagé
import { corsHeaders } from '../_shared/cors.ts';

// --- Configuration ---
const AI_MODEL = "meta-llama/llama-3.1-70b-instruct:free"; // Modèle IA utilisé
const MAX_EQUIVALENTS = 5; // Max équivalents à retourner

console.log("Edge Function 'openai-equivalents' initializing...");

serve(async (req: Request) => {
  console.log(`Request received: ${req.method} ${req.url}`);

  // --- Gestion CORS Pré-vol (OPTIONS) ---
  if (req.method === 'OPTIONS') {
    console.log("Handling OPTIONS request (CORS preflight)");
    return new Response('ok', { headers: corsHeaders });
  }

  // --- Récupération des Secrets ---
  const openRouterApiKey = Deno.env.get("OPENROUTER_API_KEY");
  const appUrlReferer = Deno.env.get("APP_URL_REFERER"); // Requis par OpenRouter

  if (!openRouterApiKey) {
    console.error("CRITICAL: OPENROUTER_API_KEY secret is not set!");
    return new Response(JSON.stringify({ error: "Config serveur: Clé API manquante." }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500,
    });
  }
  if (!appUrlReferer) {
    console.error("CRITICAL: APP_URL_REFERER secret is not set!");
    return new Response(JSON.stringify({ error: "Config serveur: URL Referer manquante." }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500,
    });
  }

  // --- Traitement de la Requête POST ---
  try {
    const body = await req.json();
    const componentRef = body.reference;

    if (!componentRef || typeof componentRef !== 'string' || componentRef.trim() === '') {
      console.warn("Requête invalide: 'reference' manquante ou vide.");
      return new Response(JSON.stringify({ error: "Référence composant requise." }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 400,
      });
    }

    const trimmedRef = componentRef.trim().toUpperCase();
    console.log(`Traitement requête pour référence: ${trimmedRef}`);

    // --- Construction du Prompt pour l'IA ---
    const userPrompt = `Trouve jusqu'à ${MAX_EQUIVALENTS} équivalents techniques directs pour le composant électronique "${trimmedRef}". Concentre-toi sur les remplacements courants et fonctionnels. Pour chaque équivalent, fournis uniquement sa référence et une très courte justification (ex: 'Pin-compatible', 'Specs similaires', 'Version CMOS', 'NPN générique'). Formate la réponse STRICTEMENT comme un tableau JSON d'objets, comme ceci : [{"ref": "REF_1", "reason": "Raison 1"}, {"ref": "REF_2", "reason": "Raison 2"}]. Si aucun équivalent fiable n'est trouvé, retourne un tableau JSON vide : []`;

    console.log("Prompt envoyé à l'IA:", userPrompt);

    // --- Appel à l'API OpenRouter ---
    console.log(`Appel API OpenRouter (Modèle: ${AI_MODEL}) pour: ${trimmedRef}`);
    const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${openRouterApiKey}`,
        "Content-Type": "application/json",
        "HTTP-Referer": appUrlReferer,
        "X-Title": "StockAV"
      },
      body: JSON.stringify({
        model: AI_MODEL,
        messages: [ { role: "user", content: userPrompt } ],
        max_tokens: 200,
        temperature: 0.2,
      }),
    });

    // --- Gestion de la Réponse OpenRouter ---
    if (!response.ok) {
      const errorBody = await response.text();
      console.error(`Erreur API OpenRouter (${response.status}): ${errorBody}`);
      throw new Error(`Erreur API OpenRouter: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    console.log("Réponse brute reçue d'OpenRouter:", JSON.stringify(data));

    // --- Extraction et Validation des Équivalents ---
    let equivalents = [];
    if (data.choices && data.choices.length > 0 && data.choices[0].message?.content) {
      const rawContent = data.choices[0].message.content;
      console.log("Contenu brut IA:", rawContent);
      try {
        const jsonMatch = rawContent.match(/(\[[\s\S]*?\])/); // Regex moins gourmande
        if (jsonMatch && jsonMatch[1]) {
            const parsedContent = JSON.parse(jsonMatch[1]);
            if (Array.isArray(parsedContent)) {
              equivalents = parsedContent
                .filter(item => item && typeof item.ref === 'string' && item.ref.trim() !== '')
                .map(item => ({
                  ref: item.ref.trim().toUpperCase(),
                  reason: typeof item.reason === 'string' ? item.reason.trim() : 'Suggestion AI'
                }))
                .slice(0, MAX_EQUIVALENTS);
              console.log(`${equivalents.length} équivalents parsés.`);
            } else { console.warn("JSON IA n'est pas un tableau:", parsedContent); }
        } else { console.warn("Aucun tableau JSON trouvé dans réponse IA."); }
      } catch (parseError) { console.error("Échec parsing JSON IA.", parseError, "Contenu:", rawContent); }
    } else { console.log("Pas de contenu/choix dans réponse IA."); }

    // --- Retourner la Réponse au Frontend ---
    console.log(`Retourne ${equivalents.length} équivalents pour ${trimmedRef}.`);
    return new Response(JSON.stringify({ equivalents }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 200,
    });

  } catch (error) {
    // --- Gestion Générale des Erreurs ---
    console.error("Erreur traitement requête Edge Function:", error);
    return new Response(JSON.stringify({ error: error.message || "Erreur interne serveur." }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500,
    });
  }
});

console.log("Edge Function 'openai-equivalents' listener démarré.");
```

---

## 12. Améliorations Prévues/Possibles

*   **Sécurité :**
    *   **Activer et Configurer RLS (Priorité haute).**
    *   Restreindre CORS à l'URL de production.
*   **Fonctionnalités :**
    *   **Chat Conversationnel :** Gérer questions sur description, pinout, comparaisons. Nécessite modif `script.js` et Fonction Edge (prompts dynamiques).
    *   **Purge Historique :** Implémenter la logique de suppression dans `script.js` pour les boutons ajoutés (si utilisateur 'zine'). **=> Fait**
    *   **Import CSV :** Ajouter options "Écraser" / "Ajouter (Maj/Ignorer doublons ?)". Nécessite modif `index.html` et `script.js`.
*   **Robustesse & UX :**
    *   Améliorer `extractReference` pour plus de flexibilité.
    *   Gestion d'erreurs plus détaillée ( réseau, API, DB).
    *   Indicateurs de chargement plus fins.
    *   Optimiser affichage/requêtes si large inventaire.
*   **Développement :**
    *   Ajouter tests automatisés.
    *   Interface admin pour gérer utilisateurs (si besoin).

---
Fin du Wiki Projet StockAV
```